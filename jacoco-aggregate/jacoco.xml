<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.1//EN" "report.dtd"><report name="Functionals by annotation in Java"><sessioninfo id="fv-az278-268-cc277643" start="1663469385504" dump="1663469390189"/><group name="annotation-definitions"><package name="com/dan323/functional/annotation"><class name="com/dan323/functional/annotation/Functor" sourcefilename="Functor.java"/><class name="com/dan323/functional/annotation/ClassAware" sourcefilename="ClassAware.java"/><class name="com/dan323/functional/annotation/Alternative" sourcefilename="Alternative.java"/><class name="com/dan323/functional/annotation/Semigroup" sourcefilename="Semigroup.java"/><class name="com/dan323/functional/annotation/Structure" sourcefilename="Structure.java"/><class name="com/dan323/functional/annotation/Monoid" sourcefilename="Monoid.java"/><class name="com/dan323/functional/annotation/Applicative" sourcefilename="Applicative.java"/><class name="com/dan323/functional/annotation/Foldable" sourcefilename="Foldable.java"/><class name="com/dan323/functional/annotation/Ring" sourcefilename="Ring.java"/><class name="com/dan323/functional/annotation/Monad" sourcefilename="Monad.java"/><class name="com/dan323/functional/annotation/Traversal" sourcefilename="Traversal.java"/><sourcefile name="Semigroup.java"/><sourcefile name="Ring.java"/><sourcefile name="Alternative.java"/><sourcefile name="Traversal.java"/><sourcefile name="Monoid.java"/><sourcefile name="Monad.java"/><sourcefile name="Foldable.java"/><sourcefile name="Applicative.java"/><sourcefile name="Structure.java"/><sourcefile name="ClassAware.java"/><sourcefile name="Functor.java"/></package><package name="com/dan323/functional/annotation/funcs"><class name="com/dan323/functional/annotation/funcs/IAlternative" sourcefilename="IAlternative.java"/><class name="com/dan323/functional/annotation/funcs/IMonad" sourcefilename="IMonad.java"/><class name="com/dan323/functional/annotation/funcs/ITraversal" sourcefilename="ITraversal.java"/><class name="com/dan323/functional/annotation/funcs/IFunctor" sourcefilename="IFunctor.java"/><class name="com/dan323/functional/annotation/funcs/IFoldable" sourcefilename="IFoldable.java"/><class name="com/dan323/functional/annotation/funcs/Functional" sourcefilename="Functional.java"/><class name="com/dan323/functional/annotation/funcs/IApplicative" sourcefilename="IApplicative.java"/><sourcefile name="Functional.java"/><sourcefile name="IFunctor.java"/><sourcefile name="IFoldable.java"/><sourcefile name="ITraversal.java"/><sourcefile name="IMonad.java"/><sourcefile name="IApplicative.java"/><sourcefile name="IAlternative.java"/></package><package name="com/dan323/functional/annotation/algs"><class name="com/dan323/functional/annotation/algs/IRing" sourcefilename="IRing.java"/><class name="com/dan323/functional/annotation/algs/IMonoid" sourcefilename="IMonoid.java"/><class name="com/dan323/functional/annotation/algs/ISemigroup" sourcefilename="ISemigroup.java"/><class name="com/dan323/functional/annotation/algs/Algebraic" sourcefilename="Algebraic.java"/><sourcefile name="IMonoid.java"/><sourcefile name="ISemigroup.java"/><sourcefile name="IRing.java"/><sourcefile name="Algebraic.java"/></package></group><group name="example-functional"><package name="com/dan323/functional/data/util/alternative"><class name="com/dan323/functional/data/util/alternative/AlternativeFuns" sourcefilename="AlternativeFuns.java"><method name="&lt;init&gt;" desc="()V" line="14"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="some" desc="(Lcom/dan323/functional/annotation/funcs/IAlternative;Ljava/lang/Object;)Ljava/lang/Object;" line="19"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="many" desc="(Lcom/dan323/functional/annotation/funcs/IAlternative;Ljava/lang/Object;)Ljava/lang/Object;" line="23"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$some$1" desc="(Ljava/lang/Object;)Ljava/util/function/Function;" line="19"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$some$0" desc="(Ljava/lang/Object;Lcom/dan323/functional/data/list/List;)Lcom/dan323/functional/data/list/List;" line="19"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="32" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/util/alternative/AlternativeMonoid" sourcefilename="AlternativeMonoid.java"><method name="&lt;init&gt;" desc="(Lcom/dan323/functional/annotation/funcs/IAlternative;)V" line="13"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="op" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="18"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unit" desc="()Ljava/lang/Object;" line="22"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="3" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="AlternativeFuns.java"><line nr="14" mi="2" ci="0" mb="0" cb="0"/><line nr="15" mi="4" ci="0" mb="0" cb="0"/><line nr="19" mi="17" ci="0" mb="0" cb="0"/><line nr="23" mi="9" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="32" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="AlternativeMonoid.java"><line nr="13" mi="2" ci="0" mb="0" cb="0"/><line nr="14" mi="3" ci="0" mb="0" cb="0"/><line nr="15" mi="1" ci="0" mb="0" cb="0"/><line nr="18" mi="6" ci="0" mb="0" cb="0"/><line nr="22" mi="4" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="3" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="48" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="8" covered="0"/><counter type="METHOD" missed="8" covered="0"/><counter type="CLASS" missed="2" covered="0"/></package><package name="com/dan323/functional/data/integer"><class name="com/dan323/functional/data/integer/ProdMonoid" sourcefilename="ProdMonoid.java"><method name="getInstance" desc="()Lcom/dan323/functional/data/integer/ProdMonoid;" line="12"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="op" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/Integer;" line="16"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unit" desc="()Ljava/lang/Integer;" line="20"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="23"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/integer/SumMonoid" sourcefilename="SumMonoid.java"><method name="getInstance" desc="()Lcom/dan323/functional/data/integer/SumMonoid;" line="13"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="op" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/Integer;" line="17"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unit" desc="()Ljava/lang/Integer;" line="21"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="24"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="SumMonoid.java"><line nr="13" mi="2" ci="0" mb="0" cb="0"/><line nr="17" mi="7" ci="0" mb="0" cb="0"/><line nr="21" mi="3" ci="0" mb="0" cb="0"/><line nr="24" mi="5" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="ProdMonoid.java"><line nr="12" mi="2" ci="0" mb="0" cb="0"/><line nr="16" mi="7" ci="0" mb="0" cb="0"/><line nr="20" mi="3" ci="0" mb="0" cb="0"/><line nr="23" mi="5" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="8" covered="0"/><counter type="METHOD" missed="8" covered="0"/><counter type="CLASS" missed="2" covered="0"/></package><package name="com/dan323/functional/data/state"><class name="com/dan323/functional/data/state/State" sourcefilename="State.java"><method name="execute" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="11"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="evaluate" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="15"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="get" desc="()Lcom/dan323/functional/data/state/State;" line="19"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="put" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/state/State;" line="23"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$put$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Lcom/dan323/functional/data/Pair;" line="23"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$get$0" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/Pair;" line="19"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="29" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/state/StateMonad" sourcefilename="StateMonad.java"><method name="getInstance" desc="()Lcom/dan323/functional/data/state/StateMonad;" line="18"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Lcom/dan323/functional/data/state/State;Ljava/util/function/Function;)Lcom/dan323/functional/data/state/State;" line="22"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pure" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/state/State;" line="28"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="fapply" desc="(Lcom/dan323/functional/data/state/State;Lcom/dan323/functional/data/state/State;)Lcom/dan323/functional/data/state/State;" line="32"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="join" desc="(Lcom/dan323/functional/data/state/State;)Lcom/dan323/functional/data/state/State;" line="39"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="flatMap" desc="(Ljava/util/function/Function;Lcom/dan323/functional/data/state/State;)Lcom/dan323/functional/data/state/State;" line="44"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getClassAtRuntime" desc="()Ljava/lang/Class;" line="52"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$flatMap$6" desc="(Lcom/dan323/functional/data/state/State;Ljava/util/function/Function;Ljava/lang/Object;)Lcom/dan323/functional/data/Pair;" line="45"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$join$5" desc="(Lcom/dan323/functional/data/state/State;Ljava/lang/Object;)Lcom/dan323/functional/data/Pair;" line="39"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$fapply$4" desc="(Lcom/dan323/functional/data/state/State;Lcom/dan323/functional/data/state/State;Ljava/lang/Object;)Lcom/dan323/functional/data/Pair;" line="33"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$fapply$3" desc="(Ljava/util/function/Function;Lcom/dan323/functional/data/Pair;)Ljava/lang/Object;" line="35"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$fapply$2" desc="(Ljava/util/function/Function;Lcom/dan323/functional/data/Pair;)Ljava/lang/Object;" line="35"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$pure$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Lcom/dan323/functional/data/Pair;" line="28"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$map$0" desc="(Lcom/dan323/functional/data/state/State;Ljava/util/function/Function;Ljava/lang/Object;)Lcom/dan323/functional/data/Pair;" line="23"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="15"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="76" covered="0"/><counter type="LINE" missed="17" covered="0"/><counter type="COMPLEXITY" missed="15" covered="0"/><counter type="METHOD" missed="15" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="State.java"><line nr="11" mi="6" ci="0" mb="0" cb="0"/><line nr="15" mi="6" ci="0" mb="0" cb="0"/><line nr="19" mi="8" ci="0" mb="0" cb="0"/><line nr="23" mi="9" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="29" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="StateMonad.java"><line nr="15" mi="5" ci="0" mb="0" cb="0"/><line nr="18" mi="2" ci="0" mb="0" cb="0"/><line nr="22" mi="4" ci="0" mb="0" cb="0"/><line nr="23" mi="6" ci="0" mb="0" cb="0"/><line nr="24" mi="1" ci="0" mb="0" cb="0"/><line nr="28" mi="9" ci="0" mb="0" cb="0"/><line nr="32" mi="4" ci="0" mb="0" cb="0"/><line nr="33" mi="6" ci="0" mb="0" cb="0"/><line nr="34" mi="3" ci="0" mb="0" cb="0"/><line nr="35" mi="9" ci="0" mb="0" cb="0"/><line nr="39" mi="6" ci="0" mb="0" cb="0"/><line nr="40" mi="5" ci="0" mb="0" cb="0"/><line nr="44" mi="4" ci="0" mb="0" cb="0"/><line nr="45" mi="3" ci="0" mb="0" cb="0"/><line nr="46" mi="2" ci="0" mb="0" cb="0"/><line nr="47" mi="5" ci="0" mb="0" cb="0"/><line nr="52" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="76" covered="0"/><counter type="LINE" missed="17" covered="0"/><counter type="COMPLEXITY" missed="15" covered="0"/><counter type="METHOD" missed="15" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="105" covered="0"/><counter type="LINE" missed="21" covered="0"/><counter type="COMPLEXITY" missed="21" covered="0"/><counter type="METHOD" missed="21" covered="0"/><counter type="CLASS" missed="2" covered="0"/></package><package name="com/dan323/functional/data"><class name="com/dan323/functional/data/Stack" sourcefilename="Stack.java"><method name="&lt;init&gt;" desc="(Lcom/dan323/functional/data/state/State;)V" line="11"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="push" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/Stack;" line="16"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pop" desc="()Lcom/dan323/functional/data/Stack;" line="20"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="29"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="apply" desc="(Lcom/dan323/functional/data/list/List;)Lcom/dan323/functional/data/Pair;" line="34"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$pop$1" desc="(Lcom/dan323/functional/data/list/List;)Lcom/dan323/functional/data/Pair;" line="20"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$push$0" desc="(Ljava/lang/Object;Lcom/dan323/functional/data/list/List;)Lcom/dan323/functional/data/Pair;" line="16"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="46" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="7" covered="0"/><counter type="METHOD" missed="7" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/IdentityMonad" sourcefilename="IdentityMonad.java"><method name="&lt;init&gt;" desc="()V" line="12"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pure" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/Identity;" line="14"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Lcom/dan323/functional/data/Identity;Ljava/util/function/Function;)Lcom/dan323/functional/data/Identity;" line="18"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="fapply" desc="(Lcom/dan323/functional/data/Identity;Lcom/dan323/functional/data/Identity;)Lcom/dan323/functional/data/Identity;" line="22"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="join" desc="(Lcom/dan323/functional/data/Identity;)Lcom/dan323/functional/data/Identity;" line="26"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="flatMap" desc="(Ljava/util/function/Function;Lcom/dan323/functional/data/Identity;)Lcom/dan323/functional/data/Identity;" line="30"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftA2" desc="(Ljava/util/function/BiFunction;Lcom/dan323/functional/data/Identity;Lcom/dan323/functional/data/Identity;)Lcom/dan323/functional/data/Identity;" line="34"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getClassAtRuntime" desc="()Ljava/lang/Class;" line="39"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="40" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="8" covered="0"/><counter type="METHOD" missed="8" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/Pair" sourcefilename="Pair.java"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/lang/Object;)V" line="13"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getKey" desc="()Ljava/lang/Object;" line="19"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getValue" desc="()Ljava/lang/Object;" line="24"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="setValue" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="29"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mapFirst" desc="(Ljava/util/function/Function;)Lcom/dan323/functional/data/Pair;" line="33"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mapSecond" desc="(Ljava/util/function/Function;)Lcom/dan323/functional/data/Pair;" line="37"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="biMap" desc="(Ljava/util/function/BiFunction;Ljava/util/function/BiFunction;)Lcom/dan323/functional/data/Pair;" line="41"><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="45"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="49"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hashCode" desc="()I" line="54"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="59"><counter type="INSTRUCTION" missed="29" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="123" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="16" covered="0"/><counter type="COMPLEXITY" missed="15" covered="0"/><counter type="METHOD" missed="11" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/Identity" sourcefilename="Identity.java"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;)V" line="7"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="runIdentity" desc="(Lcom/dan323/functional/data/Identity;)Ljava/lang/Object;" line="12"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="Identity.java"><line nr="7" mi="2" ci="0" mb="0" cb="0"/><line nr="8" mi="3" ci="0" mb="0" cb="0"/><line nr="9" mi="1" ci="0" mb="0" cb="0"/><line nr="12" mi="3" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="IdentityMonad.java"><line nr="12" mi="3" ci="0" mb="0" cb="0"/><line nr="14" mi="5" ci="0" mb="0" cb="0"/><line nr="18" mi="6" ci="0" mb="0" cb="0"/><line nr="22" mi="6" ci="0" mb="0" cb="0"/><line nr="26" mi="4" ci="0" mb="0" cb="0"/><line nr="30" mi="6" ci="0" mb="0" cb="0"/><line nr="34" mi="8" ci="0" mb="0" cb="0"/><line nr="39" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="40" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="8" covered="0"/><counter type="METHOD" missed="8" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="Stack.java"><line nr="11" mi="2" ci="0" mb="0" cb="0"/><line nr="12" mi="3" ci="0" mb="0" cb="0"/><line nr="13" mi="1" ci="0" mb="0" cb="0"/><line nr="16" mi="14" ci="0" mb="0" cb="0"/><line nr="20" mi="13" ci="0" mb="0" cb="0"/><line nr="29" mi="7" ci="0" mb="0" cb="0"/><line nr="34" mi="6" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="46" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="7" covered="0"/><counter type="METHOD" missed="7" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="Pair.java"><line nr="13" mi="2" ci="0" mb="0" cb="0"/><line nr="14" mi="7" ci="0" mb="0" cb="0"/><line nr="15" mi="1" ci="0" mb="0" cb="0"/><line nr="19" mi="4" ci="0" mb="0" cb="0"/><line nr="24" mi="4" ci="0" mb="0" cb="0"/><line nr="29" mi="5" ci="0" mb="0" cb="0"/><line nr="33" mi="12" ci="0" mb="0" cb="0"/><line nr="37" mi="12" ci="0" mb="0" cb="0"/><line nr="41" mi="20" ci="0" mb="0" cb="0"/><line nr="45" mi="9" ci="0" mb="0" cb="0"/><line nr="49" mi="6" ci="0" mb="0" cb="0"/><line nr="54" mi="12" ci="0" mb="0" cb="0"/><line nr="59" mi="5" ci="0" mb="2" cb="0"/><line nr="60" mi="6" ci="0" mb="2" cb="0"/><line nr="61" mi="16" ci="0" mb="4" cb="0"/><line nr="63" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="123" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="16" covered="0"/><counter type="COMPLEXITY" missed="15" covered="0"/><counter type="METHOD" missed="11" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="218" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="35" covered="0"/><counter type="COMPLEXITY" missed="32" covered="0"/><counter type="METHOD" missed="28" covered="0"/><counter type="CLASS" missed="4" covered="0"/></package><package name="com/dan323/functional/data/util/foldable"><class name="com/dan323/functional/data/util/foldable/FoldableFuns" sourcefilename="FoldableFuns.java"><method name="&lt;init&gt;" desc="()V" line="19"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isEmpty" desc="(Lcom/dan323/functional/annotation/funcs/IFoldable;Ljava/lang/Object;)Z" line="32"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="length" desc="(Lcom/dan323/functional/annotation/funcs/IFoldable;Ljava/lang/Object;)I" line="44"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="contains" desc="(Lcom/dan323/functional/annotation/funcs/IFoldable;Ljava/lang/Object;Ljava/lang/Object;)Z" line="58"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="filter" desc="(Lcom/dan323/functional/annotation/funcs/IFoldable;Lcom/dan323/functional/annotation/funcs/IApplicative;Lcom/dan323/functional/annotation/algs/IMonoid;Ljava/lang/Object;Ljava/util/function/Predicate;)Ljava/lang/Object;" line="74"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$filter$3" desc="(Ljava/util/function/Predicate;Lcom/dan323/functional/annotation/funcs/IApplicative;Lcom/dan323/functional/annotation/algs/IMonoid;Ljava/lang/Object;)Ljava/lang/Object;" line="74"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$contains$2" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Boolean;" line="58"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$length$1" desc="(Ljava/lang/Object;)Ljava/lang/Integer;" line="44"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isEmpty$0" desc="(Ljava/lang/Object;)Ljava/lang/Boolean;" line="32"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="61" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="10" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="FoldableFuns.java"><line nr="19" mi="2" ci="0" mb="0" cb="0"/><line nr="20" mi="4" ci="0" mb="0" cb="0"/><line nr="32" mi="10" ci="0" mb="0" cb="0"/><line nr="44" mi="11" ci="0" mb="0" cb="0"/><line nr="58" mi="14" ci="0" mb="0" cb="0"/><line nr="74" mi="20" ci="0" mb="2" cb="0"/><counter type="INSTRUCTION" missed="61" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="10" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="61" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="10" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></package><package name="com/dan323/functional/data/list/zipper"><class name="com/dan323/functional/data/list/zipper/ListZipperFunctor" sourcefilename="ListZipperFunctor.java"><method name="&lt;init&gt;" desc="()V" line="13"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Lcom/dan323/functional/data/list/zipper/ListZipper;Ljava/util/function/Function;)Lcom/dan323/functional/data/list/zipper/ListZipper;" line="18"><counter type="INSTRUCTION" missed="22" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getInstance" desc="()Lcom/dan323/functional/data/list/zipper/ListZipperFunctor;" line="25"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getClassAtRuntime" desc="()Ljava/lang/Class;" line="30"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$map$0" desc="(Lcom/dan323/functional/data/list/zipper/ListZipper;Ljava/util/function/Function;Ljava/lang/Object;)Lcom/dan323/functional/data/list/FiniteList;" line="19"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="15"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="41" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/list/zipper/ListZipper" sourcefilename="ListZipper.java"><method name="index" desc="()I" line="27"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Lcom/dan323/functional/data/list/FiniteList;Ljava/lang/Object;Lcom/dan323/functional/data/list/FiniteList;)V" line="31"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Lcom/dan323/functional/data/list/FiniteList;Lcom/dan323/functional/data/list/FiniteList;)V" line="34"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Lcom/dan323/functional/data/list/FiniteList;)V" line="42"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="get" desc="()Lcom/dan323/functional/data/optional/Maybe;" line="51"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getLeft" desc="()Lcom/dan323/functional/data/list/FiniteList;" line="55"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getRight" desc="()Lcom/dan323/functional/data/list/FiniteList;" line="59"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="zipFrom" desc="(Lcom/dan323/functional/data/list/FiniteList;)Lcom/dan323/functional/data/list/zipper/ListZipper;" line="63"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="moveLeft" desc="()Lcom/dan323/functional/data/optional/Maybe;" line="67"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="moveRight" desc="()Lcom/dan323/functional/data/optional/Maybe;" line="71"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="modify" desc="(Ljava/util/function/Function;)Lcom/dan323/functional/data/list/zipper/ListZipper;" line="75"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="set" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/list/zipper/ListZipper;" line="79"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toList" desc="()Lcom/dan323/functional/data/list/List;" line="83"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="88"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$set$4" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="79"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$modify$3" desc="(Lcom/dan323/functional/data/list/FiniteList;)Lcom/dan323/functional/data/list/zipper/ListZipper;" line="75"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$modify$2" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/list/FiniteList;" line="75"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$moveRight$1" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/list/zipper/ListZipper;" line="71"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$moveLeft$0" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/list/zipper/ListZipper;" line="67"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="141" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="25" covered="0"/><counter type="COMPLEXITY" missed="22" covered="0"/><counter type="METHOD" missed="19" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="ListZipper.java"><line nr="27" mi="4" ci="0" mb="0" cb="0"/><line nr="31" mi="6" ci="0" mb="0" cb="0"/><line nr="32" mi="1" ci="0" mb="0" cb="0"/><line nr="34" mi="2" ci="0" mb="0" cb="0"/><line nr="35" mi="4" ci="0" mb="4" cb="0"/><line nr="36" mi="5" ci="0" mb="0" cb="0"/><line nr="38" mi="3" ci="0" mb="0" cb="0"/><line nr="39" mi="3" ci="0" mb="0" cb="0"/><line nr="40" mi="1" ci="0" mb="0" cb="0"/><line nr="42" mi="2" ci="0" mb="0" cb="0"/><line nr="43" mi="2" ci="0" mb="2" cb="0"/><line nr="44" mi="5" ci="0" mb="0" cb="0"/><line nr="46" mi="3" ci="0" mb="0" cb="0"/><line nr="47" mi="3" ci="0" mb="0" cb="0"/><line nr="48" mi="1" ci="0" mb="0" cb="0"/><line nr="51" mi="4" ci="0" mb="0" cb="0"/><line nr="55" mi="3" ci="0" mb="0" cb="0"/><line nr="59" mi="4" ci="0" mb="0" cb="0"/><line nr="63" mi="5" ci="0" mb="0" cb="0"/><line nr="67" mi="17" ci="0" mb="0" cb="0"/><line nr="71" mi="18" ci="0" mb="0" cb="0"/><line nr="75" mi="27" ci="0" mb="0" cb="0"/><line nr="79" mi="7" ci="0" mb="0" cb="0"/><line nr="83" mi="7" ci="0" mb="0" cb="0"/><line nr="88" mi="4" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="141" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="25" covered="0"/><counter type="COMPLEXITY" missed="22" covered="0"/><counter type="METHOD" missed="19" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="ListZipperFunctor.java"><line nr="13" mi="3" ci="0" mb="0" cb="0"/><line nr="15" mi="5" ci="0" mb="0" cb="0"/><line nr="18" mi="5" ci="0" mb="0" cb="0"/><line nr="19" mi="15" ci="0" mb="0" cb="0"/><line nr="20" mi="9" ci="0" mb="0" cb="0"/><line nr="25" mi="2" ci="0" mb="0" cb="0"/><line nr="30" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="41" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="182" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="32" covered="0"/><counter type="COMPLEXITY" missed="28" covered="0"/><counter type="METHOD" missed="25" covered="0"/><counter type="CLASS" missed="2" covered="0"/></package><package name="com/dan323/functional/data/optional"><class name="com/dan323/functional/data/optional/JOptionalFunctor" sourcefilename="JOptionalFunctor.java"><method name="map" desc="(Ljava/util/Optional;Ljava/util/function/Function;)Ljava/util/Optional;" line="19"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getClassAtRuntime" desc="()Ljava/lang/Class;" line="24"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="16"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="3" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/optional/Maybe" sourcefilename="Maybe.java"><method name="of" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/optional/Maybe;" line="14"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="of" desc="()Lcom/dan323/functional/data/optional/Maybe;" line="18"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/optional/Nothing" sourcefilename="Nothing.java"><method name="maybe" desc="(Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;" line="15"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="20"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hashCode" desc="()I" line="25"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="30"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="11"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/optional/MaybeMonad" sourcefilename="MaybeMonad.java"><method name="join" desc="(Lcom/dan323/functional/data/optional/Maybe;)Lcom/dan323/functional/data/optional/Maybe;" line="20"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="disjunction" desc="(Lcom/dan323/functional/data/optional/Maybe;Lcom/dan323/functional/data/optional/Maybe;)Lcom/dan323/functional/data/optional/Maybe;" line="24"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getAlternativeMonoid" desc="()Lcom/dan323/functional/data/util/alternative/AlternativeMonoid;" line="28"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="empty" desc="()Lcom/dan323/functional/data/optional/Maybe;" line="32"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="fapply" desc="(Lcom/dan323/functional/data/optional/Maybe;Lcom/dan323/functional/data/optional/Maybe;)Lcom/dan323/functional/data/optional/Maybe;" line="36"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getInstance" desc="()Lcom/dan323/functional/data/optional/MaybeMonad;" line="40"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Lcom/dan323/functional/data/optional/Maybe;Ljava/util/function/Function;)Lcom/dan323/functional/data/optional/Maybe;" line="46"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pure" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/optional/Maybe;" line="50"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getClassAtRuntime" desc="()Ljava/lang/Class;" line="55"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$map$1" desc="(Ljava/util/function/Function;Ljava/lang/Object;)Lcom/dan323/functional/data/optional/Maybe;" line="46"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$fapply$0" desc="(Lcom/dan323/functional/data/optional/Maybe;Ljava/util/function/Function;)Lcom/dan323/functional/data/optional/Maybe;" line="36"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="43"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="54" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="12" covered="0"/><counter type="METHOD" missed="12" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/optional/Just" sourcefilename="Just.java"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;)V" line="10"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maybe" desc="(Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;" line="16"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="21"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hashCode" desc="()I" line="29"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="34"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="48" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="8" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="JOptionalFunctor.java"><line nr="16" mi="5" ci="0" mb="0" cb="0"/><line nr="19" mi="4" ci="0" mb="0" cb="0"/><line nr="24" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="3" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="Maybe.java"><line nr="14" mi="5" ci="0" mb="0" cb="0"/><line nr="18" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="MaybeMonad.java"><line nr="20" mi="6" ci="0" mb="0" cb="0"/><line nr="24" mi="6" ci="0" mb="0" cb="0"/><line nr="28" mi="5" ci="0" mb="0" cb="0"/><line nr="32" mi="2" ci="0" mb="0" cb="0"/><line nr="36" mi="11" ci="0" mb="0" cb="0"/><line nr="40" mi="2" ci="0" mb="0" cb="0"/><line nr="43" mi="5" ci="0" mb="0" cb="0"/><line nr="46" mi="12" ci="0" mb="0" cb="0"/><line nr="50" mi="3" ci="0" mb="0" cb="0"/><line nr="55" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="54" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="12" covered="0"/><counter type="METHOD" missed="12" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="Nothing.java"><line nr="11" mi="5" ci="0" mb="0" cb="0"/><line nr="15" mi="2" ci="0" mb="0" cb="0"/><line nr="20" mi="7" ci="0" mb="2" cb="0"/><line nr="25" mi="4" ci="0" mb="0" cb="0"/><line nr="30" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="Just.java"><line nr="10" mi="2" ci="0" mb="0" cb="0"/><line nr="11" mi="3" ci="0" mb="0" cb="0"/><line nr="12" mi="1" ci="0" mb="0" cb="0"/><line nr="16" mi="5" ci="0" mb="0" cb="0"/><line nr="21" mi="5" ci="0" mb="2" cb="0"/><line nr="22" mi="9" ci="0" mb="4" cb="0"/><line nr="23" mi="3" ci="0" mb="0" cb="0"/><line nr="24" mi="6" ci="0" mb="0" cb="0"/><line nr="29" mi="9" ci="0" mb="0" cb="0"/><line nr="34" mi="5" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="48" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="8" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="140" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="30" covered="0"/><counter type="COMPLEXITY" missed="31" covered="0"/><counter type="METHOD" missed="27" covered="0"/><counter type="CLASS" missed="5" covered="0"/></package><package name="com/dan323/functional/data/continuation"><class name="com/dan323/functional/data/continuation/ContinuationMonad" sourcefilename="ContinuationMonad.java"><method name="getInstance" desc="()Lcom/dan323/functional/data/continuation/ContinuationMonad;" line="15"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Lcom/dan323/functional/data/continuation/Continuation;Ljava/util/function/Function;)Lcom/dan323/functional/data/continuation/Continuation;" line="19"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pure" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/continuation/Continuation;" line="23"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="fapply" desc="(Lcom/dan323/functional/data/continuation/Continuation;Lcom/dan323/functional/data/continuation/Continuation;)Lcom/dan323/functional/data/continuation/Continuation;" line="27"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="join" desc="(Lcom/dan323/functional/data/continuation/Continuation;)Lcom/dan323/functional/data/continuation/Continuation;" line="31"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getClassAtRuntime" desc="()Ljava/lang/Class;" line="36"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$join$5" desc="(Lcom/dan323/functional/data/continuation/Continuation;Ljava/util/function/Function;)Ljava/lang/Object;" line="31"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$join$4" desc="(Ljava/util/function/Function;Lcom/dan323/functional/data/continuation/Continuation;)Ljava/lang/Object;" line="31"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$fapply$3" desc="(Lcom/dan323/functional/data/continuation/Continuation;Lcom/dan323/functional/data/continuation/Continuation;Ljava/util/function/Function;)Ljava/lang/Object;" line="27"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$fapply$2" desc="(Lcom/dan323/functional/data/continuation/Continuation;Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/lang/Object;" line="27"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$pure$1" desc="(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;" line="23"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$map$0" desc="(Lcom/dan323/functional/data/continuation/Continuation;Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/lang/Object;" line="19"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="51" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="12" covered="0"/><counter type="METHOD" missed="12" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/continuation/Continuation" sourcefilename="Continuation.java"><method name="eval" desc="(Lcom/dan323/functional/data/continuation/Continuation;)Ljava/lang/Object;" line="10"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="withCont" desc="(Ljava/util/function/BiFunction;Lcom/dan323/functional/data/continuation/Continuation;)Lcom/dan323/functional/data/continuation/Continuation;" line="14"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="withCont2" desc="(Ljava/util/function/Function;Lcom/dan323/functional/data/continuation/Continuation;)Lcom/dan323/functional/data/continuation/Continuation;" line="18"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$withCont$1" desc="(Ljava/util/function/BiFunction;Ljava/util/function/Function;)Ljava/util/function/Function;" line="14"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$withCont$0" desc="(Ljava/util/function/BiFunction;Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;" line="14"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="ContinuationMonad.java"><line nr="15" mi="4" ci="0" mb="0" cb="0"/><line nr="19" mi="10" ci="0" mb="0" cb="0"/><line nr="23" mi="7" ci="0" mb="0" cb="0"/><line nr="27" mi="16" ci="0" mb="0" cb="0"/><line nr="31" mi="12" ci="0" mb="0" cb="0"/><line nr="36" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="51" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="12" covered="0"/><counter type="METHOD" missed="12" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="Continuation.java"><line nr="10" mi="4" ci="0" mb="0" cb="0"/><line nr="14" mi="14" ci="0" mb="0" cb="0"/><line nr="18" mi="5" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="74" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="17" covered="0"/><counter type="METHOD" missed="17" covered="0"/><counter type="CLASS" missed="2" covered="0"/></package><package name="com/dan323/functional/data/function"><class name="com/dan323/functional/data/function/FunctionFrom" sourcefilename="FunctionFrom.java"><method name="getInstance" desc="()Lcom/dan323/functional/data/function/FunctionFrom;" line="16"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/function/Function;" line="22"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pure" desc="(Ljava/lang/Object;)Ljava/util/function/Function;" line="26"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="fapply" desc="(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/function/Function;" line="30"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftA2" desc="(Ljava/util/function/BiFunction;Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/function/Function;" line="34"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="flatMap" desc="(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/function/Function;" line="38"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="join" desc="(Ljava/util/function/Function;)Ljava/util/function/Function;" line="42"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getClassAtRuntime" desc="()Ljava/lang/Class;" line="47"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$join$3" desc="(Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;" line="42"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$liftA2$2" desc="(Ljava/util/function/BiFunction;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;" line="34"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$fapply$1" desc="(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;" line="30"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$pure$0" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="26"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="19"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="61" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="13" covered="0"/><counter type="METHOD" missed="13" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/function/EndoMonoid" sourcefilename="EndoMonoid.java"><method name="op" desc="(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/function/Function;" line="14"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unit" desc="()Ljava/util/function/Function;" line="18"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getInstance" desc="()Lcom/dan323/functional/data/function/EndoMonoid;" line="22"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="25"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="EndoMonoid.java"><line nr="14" mi="4" ci="0" mb="0" cb="0"/><line nr="18" mi="2" ci="0" mb="0" cb="0"/><line nr="22" mi="2" ci="0" mb="0" cb="0"/><line nr="25" mi="5" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="FunctionFrom.java"><line nr="16" mi="2" ci="0" mb="0" cb="0"/><line nr="19" mi="5" ci="0" mb="0" cb="0"/><line nr="22" mi="4" ci="0" mb="0" cb="0"/><line nr="26" mi="5" ci="0" mb="0" cb="0"/><line nr="30" mi="13" ci="0" mb="0" cb="0"/><line nr="34" mi="14" ci="0" mb="0" cb="0"/><line nr="38" mi="6" ci="0" mb="0" cb="0"/><line nr="42" mi="10" ci="0" mb="0" cb="0"/><line nr="47" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="61" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="13" covered="0"/><counter type="METHOD" missed="13" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="74" covered="0"/><counter type="LINE" missed="13" covered="0"/><counter type="COMPLEXITY" missed="17" covered="0"/><counter type="METHOD" missed="17" covered="0"/><counter type="CLASS" missed="2" covered="0"/></package><package name="com/dan323/functional/data/tree"><class name="com/dan323/functional/data/tree/BinaryNode" sourcefilename="BinaryNode.java"><method name="&lt;init&gt;" desc="(Lcom/dan323/functional/data/tree/BinaryTree;Ljava/lang/Object;Lcom/dan323/functional/data/tree/BinaryTree;)V" line="11"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="left" desc="()Lcom/dan323/functional/data/tree/BinaryTree;" line="18"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="right" desc="()Lcom/dan323/functional/data/tree/BinaryTree;" line="22"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="data" desc="()Ljava/lang/Object;" line="26"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hashCode" desc="()I" line="31"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="36"><counter type="INSTRUCTION" missed="29" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="46"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="70" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="14" covered="0"/><counter type="COMPLEXITY" missed="11" covered="0"/><counter type="METHOD" missed="7" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/tree/BTreeFunctor" sourcefilename="BTreeFunctor.java"><method name="map" desc="(Lcom/dan323/functional/data/tree/BinaryTree;Ljava/util/function/Function;)Lcom/dan323/functional/data/tree/BinaryTree;" line="17"><counter type="INSTRUCTION" missed="30" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pure" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/tree/BinaryTree;" line="27"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getClassAtRuntime" desc="()Ljava/lang/Class;" line="32"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="14"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="42" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/tree/Leaf" sourcefilename="Leaf.java"><method name="hashCode" desc="()I" line="12"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="17"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="22"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="8"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/tree/BinaryTree" sourcefilename="BinaryTree.java"><method name="leaf" desc="()Lcom/dan323/functional/data/tree/BinaryTree;" line="11"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="node" desc="(Lcom/dan323/functional/data/tree/BinaryTree;Ljava/lang/Object;Lcom/dan323/functional/data/tree/BinaryTree;)Lcom/dan323/functional/data/tree/BinaryTree;" line="15"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="BinaryNode.java"><line nr="11" mi="2" ci="0" mb="0" cb="0"/><line nr="12" mi="3" ci="0" mb="0" cb="0"/><line nr="13" mi="3" ci="0" mb="0" cb="0"/><line nr="14" mi="3" ci="0" mb="0" cb="0"/><line nr="15" mi="1" ci="0" mb="0" cb="0"/><line nr="18" mi="3" ci="0" mb="0" cb="0"/><line nr="22" mi="3" ci="0" mb="0" cb="0"/><line nr="26" mi="3" ci="0" mb="0" cb="0"/><line nr="31" mi="12" ci="0" mb="0" cb="0"/><line nr="36" mi="5" ci="0" mb="2" cb="0"/><line nr="37" mi="6" ci="0" mb="2" cb="0"/><line nr="38" mi="16" ci="0" mb="4" cb="0"/><line nr="40" mi="2" ci="0" mb="0" cb="0"/><line nr="46" mi="8" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="70" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="14" covered="0"/><counter type="COMPLEXITY" missed="11" covered="0"/><counter type="METHOD" missed="7" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="Leaf.java"><line nr="8" mi="5" ci="0" mb="0" cb="0"/><line nr="12" mi="2" ci="0" mb="0" cb="0"/><line nr="17" mi="3" ci="0" mb="0" cb="0"/><line nr="22" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="BinaryTree.java"><line nr="11" mi="2" ci="0" mb="0" cb="0"/><line nr="15" mi="7" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="BTreeFunctor.java"><line nr="14" mi="5" ci="0" mb="0" cb="0"/><line nr="17" mi="3" ci="0" mb="2" cb="0"/><line nr="18" mi="2" ci="0" mb="0" cb="0"/><line nr="19" mi="6" ci="0" mb="2" cb="0"/><line nr="20" mi="14" ci="0" mb="0" cb="0"/><line nr="22" mi="5" ci="0" mb="0" cb="0"/><line nr="27" mi="5" ci="0" mb="0" cb="0"/><line nr="32" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="42" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="133" covered="0"/><counter type="BRANCH" missed="12" covered="0"/><counter type="LINE" missed="28" covered="0"/><counter type="COMPLEXITY" missed="23" covered="0"/><counter type="METHOD" missed="17" covered="0"/><counter type="CLASS" missed="4" covered="0"/></package><package name="com/dan323/functional/data/pair"><class name="com/dan323/functional/data/pair/ProdApplicative" sourcefilename="ProdApplicative.java"><method name="&lt;init&gt;" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Lcom/dan323/functional/annotation/funcs/IApplicative;)V" line="13"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pure" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/pair/PairTypeContructor;" line="17"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="fapply" desc="(Lcom/dan323/functional/data/pair/PairTypeContructor;Lcom/dan323/functional/data/pair/PairTypeContructor;)Lcom/dan323/functional/data/pair/PairTypeContructor;" line="21"><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="3" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/pair/ProdMonad" sourcefilename="ProdMonad.java"><method name="&lt;init&gt;" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Lcom/dan323/functional/annotation/funcs/IMonad;)V" line="14"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="flatMap" desc="(Ljava/util/function/Function;Lcom/dan323/functional/data/pair/PairTypeContructor;)Lcom/dan323/functional/data/pair/PairTypeContructor;" line="18"><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$flatMap$1" desc="(Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;" line="18"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$flatMap$0" desc="(Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;" line="18"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="37" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/pair/ProdFunctor" sourcefilename="ProdFunctor.java"><method name="&lt;init&gt;" desc="(Lcom/dan323/functional/annotation/funcs/IFunctor;Lcom/dan323/functional/annotation/funcs/IFunctor;)V" line="13"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Lcom/dan323/functional/data/pair/PairTypeContructor;Ljava/util/function/Function;)Lcom/dan323/functional/data/pair/PairTypeContructor;" line="17"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/pair/ProdFunctional" sourcefilename="ProdFunctional.java"><method name="&lt;init&gt;" desc="(Lcom/dan323/functional/annotation/funcs/Functional;Lcom/dan323/functional/annotation/funcs/Functional;)V" line="14"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getClassAtRuntime" desc="()Ljava/lang/Class;" line="21"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/pair/PairTypeContructor" sourcefilename="PairTypeContructor.java"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/lang/Object;)V" line="10"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getFirst" desc="()Ljava/lang/Object;" line="16"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getSecond" desc="()Ljava/lang/Object;" line="20"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hashCode" desc="()I" line="25"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="30"><counter type="INSTRUCTION" missed="29" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="56" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="11" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="ProdMonad.java"><line nr="14" mi="4" ci="0" mb="0" cb="0"/><line nr="15" mi="1" ci="0" mb="0" cb="0"/><line nr="18" mi="32" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="37" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="ProdApplicative.java"><line nr="13" mi="4" ci="0" mb="0" cb="0"/><line nr="14" mi="1" ci="0" mb="0" cb="0"/><line nr="17" mi="14" ci="0" mb="0" cb="0"/><line nr="21" mi="20" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="3" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="ProdFunctor.java"><line nr="13" mi="4" ci="0" mb="0" cb="0"/><line nr="14" mi="1" ci="0" mb="0" cb="0"/><line nr="17" mi="18" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="ProdFunctional.java"><line nr="14" mi="2" ci="0" mb="0" cb="0"/><line nr="15" mi="3" ci="0" mb="0" cb="0"/><line nr="16" mi="3" ci="0" mb="0" cb="0"/><line nr="17" mi="1" ci="0" mb="0" cb="0"/><line nr="21" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="PairTypeContructor.java"><line nr="10" mi="2" ci="0" mb="0" cb="0"/><line nr="11" mi="3" ci="0" mb="0" cb="0"/><line nr="12" mi="3" ci="0" mb="0" cb="0"/><line nr="13" mi="1" ci="0" mb="0" cb="0"/><line nr="16" mi="3" ci="0" mb="0" cb="0"/><line nr="20" mi="3" ci="0" mb="0" cb="0"/><line nr="25" mi="12" ci="0" mb="0" cb="0"/><line nr="30" mi="5" ci="0" mb="2" cb="0"/><line nr="31" mi="6" ci="0" mb="2" cb="0"/><line nr="32" mi="16" ci="0" mb="4" cb="0"/><line nr="34" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="56" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="11" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="166" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="26" covered="0"/><counter type="COMPLEXITY" missed="20" covered="0"/><counter type="METHOD" missed="16" covered="0"/><counter type="CLASS" missed="5" covered="0"/></package><package name="com/dan323/functional/data/list"><class name="com/dan323/functional/data/list/Nil" sourcefilename="Nil.java"><method name="length" desc="()I" line="17"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="head" desc="()Lcom/dan323/functional/data/optional/Maybe;" line="24"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="tail" desc="()Lcom/dan323/functional/data/list/FiniteList;" line="29"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="34"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="39"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hashCode" desc="()I" line="44"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="20"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="22" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="8" covered="0"/><counter type="METHOD" missed="7" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/list/JListFunctor" sourcefilename="JListFunctor.java"><method name="map" desc="(Ljava/util/List;Ljava/util/function/Function;)Ljava/util/List;" line="17"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getClassAtRuntime" desc="()Ljava/lang/Class;" line="22"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="15"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="3" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/list/Generating$GeneratingMapped" sourcefilename="Generating.java"><method name="&lt;init&gt;" desc="(Lcom/dan323/functional/data/list/List;Ljava/util/function/Function;)V" line="42"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="head" desc="()Lcom/dan323/functional/data/optional/Maybe;" line="49"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="tail" desc="()Lcom/dan323/functional/data/list/InfiniteList;" line="54"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Ljava/util/function/Function;)Lcom/dan323/functional/data/list/InfiniteList;" line="59"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$head$0" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/optional/Maybe;" line="49"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="43" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/list/FiniteListFunctional" sourcefilename="FiniteListFunctional.java"><method name="getInstance" desc="()Lcom/dan323/functional/data/list/FiniteListFunctional;" line="25"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getAlternativeMonoid" desc="()Lcom/dan323/functional/data/util/alternative/AlternativeMonoid;" line="29"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Lcom/dan323/functional/data/list/FiniteList;Ljava/util/function/Function;)Lcom/dan323/functional/data/list/FiniteList;" line="33"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="disjunction" desc="(Lcom/dan323/functional/data/list/FiniteList;Lcom/dan323/functional/data/list/FiniteList;)Lcom/dan323/functional/data/list/FiniteList;" line="37"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="empty" desc="()Lcom/dan323/functional/data/list/FiniteList;" line="41"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pure" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/list/FiniteList;" line="45"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="flatMap" desc="(Ljava/util/function/Function;Lcom/dan323/functional/data/list/FiniteList;)Lcom/dan323/functional/data/list/FiniteList;" line="49"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getClassAtRuntime" desc="()Ljava/lang/Class;" line="54"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$flatMap$1" desc="(Ljava/util/function/Function;Lcom/dan323/functional/data/list/FiniteList;Ljava/lang/Object;)Lcom/dan323/functional/data/list/FiniteList;" line="49"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$map$0" desc="(Ljava/util/function/Function;Lcom/dan323/functional/data/list/FiniteList;Ljava/lang/Object;)Lcom/dan323/functional/data/list/FiniteList;" line="33"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="22"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="65" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="11" covered="0"/><counter type="METHOD" missed="11" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/list/FiniteList" sourcefilename="FiniteList.java"><method name="cons" desc="(Ljava/lang/Object;Lcom/dan323/functional/data/list/FiniteList;)Lcom/dan323/functional/data/list/FiniteList;" line="14"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nil" desc="()Lcom/dan323/functional/data/list/FiniteList;" line="18"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Ljava/util/function/Function;)Lcom/dan323/functional/data/list/FiniteList;" line="33"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="of" desc="([Ljava/lang/Object;)Lcom/dan323/functional/data/list/FiniteList;" line="40"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="of" desc="(I[Ljava/lang/Object;)Lcom/dan323/functional/data/list/FiniteList;" line="49"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$map$0" desc="(Ljava/util/function/Function;Ljava/lang/Object;)Lcom/dan323/functional/data/list/FiniteList;" line="33"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="51" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="8" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/list/ZipApplicative" sourcefilename="ZipApplicative.java"><method name="&lt;init&gt;" desc="()V" line="12"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pure" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/list/List;" line="15"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftA2" desc="(Ljava/util/function/BiFunction;Lcom/dan323/functional/data/list/List;Lcom/dan323/functional/data/list/List;)Lcom/dan323/functional/data/list/List;" line="19"><counter type="INSTRUCTION" missed="83" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="11" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Lcom/dan323/functional/data/list/List;Ljava/util/function/Function;)Lcom/dan323/functional/data/list/List;" line="35"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getClassAtRuntime" desc="()Ljava/lang/Class;" line="40"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$liftA2$7" desc="(Ljava/util/function/BiFunction;Ljava/lang/Object;)Ljava/util/function/Function;" line="27"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$liftA2$6" desc="(Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="27"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$liftA2$5" desc="(Ljava/util/function/BiFunction;Ljava/lang/Object;)Ljava/util/function/Function;" line="24"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$liftA2$4" desc="(Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="24"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$liftA2$3" desc="(Lcom/dan323/functional/data/list/List;Ljava/util/function/BiFunction;Lcom/dan323/functional/data/list/List;Ljava/lang/Object;)Lcom/dan323/functional/data/list/FiniteList;" line="22"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$liftA2$2" desc="(Ljava/util/function/BiFunction;Ljava/lang/Object;Lcom/dan323/functional/data/list/List;Lcom/dan323/functional/data/list/List;Ljava/lang/Object;)Lcom/dan323/functional/data/list/FiniteList;" line="22"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$liftA2$1" desc="(Lcom/dan323/functional/data/list/List;Ljava/util/function/BiFunction;Lcom/dan323/functional/data/list/List;Ljava/lang/Object;)Lcom/dan323/functional/data/list/FiniteList;" line="20"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$liftA2$0" desc="(Ljava/util/function/BiFunction;Ljava/lang/Object;Lcom/dan323/functional/data/list/List;Lcom/dan323/functional/data/list/List;Ljava/lang/Object;)Lcom/dan323/functional/data/list/FiniteList;" line="20"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="161" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="15" covered="0"/><counter type="COMPLEXITY" missed="17" covered="0"/><counter type="METHOD" missed="13" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/list/Generating" sourcefilename="Generating.java"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/util/function/UnaryOperator;)V" line="14"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="head" desc="()Lcom/dan323/functional/data/optional/Maybe;" line="24"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="tail" desc="()Lcom/dan323/functional/data/list/InfiniteList;" line="29"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Ljava/util/function/Function;)Lcom/dan323/functional/data/list/InfiniteList;" line="34"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/list/Zipped" sourcefilename="Zipped.java"><method name="&lt;init&gt;" desc="(Lcom/dan323/functional/data/list/List;Ljava/util/function/BiFunction;Lcom/dan323/functional/data/list/List;)V" line="15"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="head" desc="()Lcom/dan323/functional/data/optional/Maybe;" line="23"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="tail" desc="()Lcom/dan323/functional/data/list/InfiniteList;" line="29"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Ljava/util/function/Function;)Lcom/dan323/functional/data/list/InfiniteList;" line="34"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$head$1" desc="(Ljava/lang/Object;)Ljava/util/function/Function;" line="23"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$head$0" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="23"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="59" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/list/InfiniteList" sourcefilename="InfiniteList.java"><method name="&lt;init&gt;" desc="()V" line="10"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="26"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hashCode" desc="()I" line="31"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="3" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/list/Repeat" sourcefilename="Repeat.java"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;)V" line="18"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="head" desc="()Lcom/dan323/functional/data/optional/Maybe;" line="25"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="tail" desc="()Lcom/dan323/functional/data/list/InfiniteList;" line="30"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Ljava/util/function/Function;)Lcom/dan323/functional/data/list/InfiniteList;" line="35"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="40"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="31" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/list/Cons" sourcefilename="Cons.java"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Lcom/dan323/functional/data/list/InfiniteList;)V" line="18"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="head" desc="()Lcom/dan323/functional/data/optional/Maybe;" line="28"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="tail" desc="()Lcom/dan323/functional/data/list/InfiniteList;" line="33"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Ljava/util/function/Function;)Lcom/dan323/functional/data/list/InfiniteList;" line="38"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="43"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="42" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="7" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/list/FinCons" sourcefilename="FinCons.java"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Lcom/dan323/functional/data/list/FiniteList;)V" line="12"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="length" desc="()I" line="18"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="head" desc="()Lcom/dan323/functional/data/optional/Maybe;" line="23"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="tail" desc="()Lcom/dan323/functional/data/list/FiniteList;" line="28"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="34"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="40"><counter type="INSTRUCTION" missed="33" covered="0"/><counter type="BRANCH" missed="10" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hashCode" desc="()I" line="48"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="79" covered="0"/><counter type="BRANCH" missed="10" covered="0"/><counter type="LINE" missed="13" covered="0"/><counter type="COMPLEXITY" missed="12" covered="0"/><counter type="METHOD" missed="7" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/list/List" sourcefilename="List.java"><method name="generate" desc="(Ljava/lang/Object;Ljava/util/function/UnaryOperator;)Lcom/dan323/functional/data/list/List;" line="20"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="cons" desc="(Ljava/lang/Object;Lcom/dan323/functional/data/list/List;)Lcom/dan323/functional/data/list/List;" line="24"><counter type="INSTRUCTION" missed="28" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="limit" desc="(I)Lcom/dan323/functional/data/list/FiniteList;" line="35"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="limitWithHead" desc="(Ljava/lang/Object;I)Lcom/dan323/functional/data/list/FiniteList;" line="39"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nil" desc="()Lcom/dan323/functional/data/list/List;" line="47"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="repeat" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/list/List;" line="51"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$limit$0" desc="(ILjava/lang/Object;)Lcom/dan323/functional/data/list/FiniteList;" line="35"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="68" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="12" covered="0"/><counter type="COMPLEXITY" missed="11" covered="0"/><counter type="METHOD" missed="7" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/list/ListUtils" sourcefilename="ListUtils.java"><method name="&lt;init&gt;" desc="()V" line="3"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="reverse" desc="(Lcom/dan323/functional/data/list/FiniteList;)Lcom/dan323/functional/data/list/FiniteList;" line="6"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="concat" desc="(Lcom/dan323/functional/data/list/FiniteList;Lcom/dan323/functional/data/list/FiniteList;)Lcom/dan323/functional/data/list/FiniteList;" line="10"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$concat$1" desc="(Lcom/dan323/functional/data/list/FiniteList;Lcom/dan323/functional/data/list/FiniteList;Ljava/lang/Object;)Lcom/dan323/functional/data/list/FiniteList;" line="10"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$reverse$0" desc="(Lcom/dan323/functional/data/list/FiniteList;Ljava/lang/Object;)Lcom/dan323/functional/data/list/FiniteList;" line="6"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="35" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="JListFunctor.java"><line nr="15" mi="5" ci="0" mb="0" cb="0"/><line nr="17" mi="6" ci="0" mb="0" cb="0"/><line nr="22" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="3" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="ZipApplicative.java"><line nr="12" mi="3" ci="0" mb="0" cb="0"/><line nr="15" mi="3" ci="0" mb="0" cb="0"/><line nr="19" mi="6" ci="0" mb="2" cb="0"/><line nr="20" mi="34" ci="0" mb="0" cb="0"/><line nr="21" mi="6" ci="0" mb="2" cb="0"/><line nr="22" mi="34" ci="0" mb="0" cb="0"/><line nr="23" mi="6" ci="0" mb="2" cb="0"/><line nr="24" mi="15" ci="0" mb="0" cb="0"/><line nr="25" mi="10" ci="0" mb="0" cb="0"/><line nr="26" mi="6" ci="0" mb="2" cb="0"/><line nr="27" mi="15" ci="0" mb="0" cb="0"/><line nr="28" mi="10" ci="0" mb="0" cb="0"/><line nr="30" mi="7" ci="0" mb="0" cb="0"/><line nr="35" mi="4" ci="0" mb="0" cb="0"/><line nr="40" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="161" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="15" covered="0"/><counter type="COMPLEXITY" missed="17" covered="0"/><counter type="METHOD" missed="13" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="FiniteListFunctional.java"><line nr="22" mi="5" ci="0" mb="0" cb="0"/><line nr="25" mi="2" ci="0" mb="0" cb="0"/><line nr="29" mi="5" ci="0" mb="0" cb="0"/><line nr="33" mi="18" ci="0" mb="0" cb="0"/><line nr="37" mi="4" ci="0" mb="0" cb="0"/><line nr="41" mi="2" ci="0" mb="0" cb="0"/><line nr="45" mi="8" ci="0" mb="0" cb="0"/><line nr="49" mi="19" ci="0" mb="0" cb="0"/><line nr="54" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="65" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="11" covered="0"/><counter type="METHOD" missed="11" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="Repeat.java"><line nr="18" mi="2" ci="0" mb="0" cb="0"/><line nr="19" mi="7" ci="0" mb="2" cb="0"/><line nr="20" mi="3" ci="0" mb="0" cb="0"/><line nr="21" mi="1" ci="0" mb="0" cb="0"/><line nr="25" mi="4" ci="0" mb="0" cb="0"/><line nr="30" mi="2" ci="0" mb="0" cb="0"/><line nr="35" mi="8" ci="0" mb="0" cb="0"/><line nr="40" mi="4" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="31" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="Nil.java"><line nr="17" mi="2" ci="0" mb="0" cb="0"/><line nr="20" mi="5" ci="0" mb="0" cb="0"/><line nr="24" mi="2" ci="0" mb="0" cb="0"/><line nr="29" mi="2" ci="0" mb="0" cb="0"/><line nr="34" mi="2" ci="0" mb="0" cb="0"/><line nr="39" mi="7" ci="0" mb="2" cb="0"/><line nr="44" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="22" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="8" covered="0"/><counter type="METHOD" missed="7" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="Zipped.java"><line nr="15" mi="2" ci="0" mb="0" cb="0"/><line nr="16" mi="3" ci="0" mb="0" cb="0"/><line nr="17" mi="3" ci="0" mb="0" cb="0"/><line nr="18" mi="3" ci="0" mb="0" cb="0"/><line nr="19" mi="1" ci="0" mb="0" cb="0"/><line nr="23" mi="17" ci="0" mb="0" cb="0"/><line nr="24" mi="6" ci="0" mb="0" cb="0"/><line nr="29" mi="12" ci="0" mb="0" cb="0"/><line nr="34" mi="12" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="59" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="Cons.java"><line nr="18" mi="2" ci="0" mb="0" cb="0"/><line nr="19" mi="4" ci="0" mb="4" cb="0"/><line nr="20" mi="4" ci="0" mb="0" cb="0"/><line nr="22" mi="3" ci="0" mb="0" cb="0"/><line nr="23" mi="3" ci="0" mb="0" cb="0"/><line nr="24" mi="1" ci="0" mb="0" cb="0"/><line nr="28" mi="4" ci="0" mb="0" cb="0"/><line nr="33" mi="3" ci="0" mb="0" cb="0"/><line nr="38" mi="12" ci="0" mb="0" cb="0"/><line nr="43" mi="6" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="42" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="7" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="FiniteList.java"><line nr="14" mi="6" ci="0" mb="0" cb="0"/><line nr="18" mi="2" ci="0" mb="0" cb="0"/><line nr="33" mi="18" ci="0" mb="0" cb="0"/><line nr="40" mi="3" ci="0" mb="2" cb="0"/><line nr="41" mi="2" ci="0" mb="0" cb="0"/><line nr="43" mi="4" ci="0" mb="0" cb="0"/><line nr="49" mi="4" ci="0" mb="2" cb="0"/><line nr="50" mi="2" ci="0" mb="0" cb="0"/><line nr="52" mi="10" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="51" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="8" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="ListUtils.java"><line nr="3" mi="3" ci="0" mb="0" cb="0"/><line nr="6" mi="16" ci="0" mb="0" cb="0"/><line nr="10" mi="16" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="35" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="Generating.java"><line nr="14" mi="2" ci="0" mb="0" cb="0"/><line nr="15" mi="4" ci="0" mb="4" cb="0"/><line nr="16" mi="5" ci="0" mb="0" cb="0"/><line nr="18" mi="3" ci="0" mb="0" cb="0"/><line nr="19" mi="3" ci="0" mb="0" cb="0"/><line nr="20" mi="1" ci="0" mb="0" cb="0"/><line nr="24" mi="4" ci="0" mb="0" cb="0"/><line nr="29" mi="11" ci="0" mb="0" cb="0"/><line nr="34" mi="6" ci="0" mb="0" cb="0"/><line nr="42" mi="2" ci="0" mb="0" cb="0"/><line nr="43" mi="3" ci="0" mb="0" cb="0"/><line nr="44" mi="3" ci="0" mb="0" cb="0"/><line nr="45" mi="1" ci="0" mb="0" cb="0"/><line nr="49" mi="15" ci="0" mb="0" cb="0"/><line nr="54" mi="9" ci="0" mb="0" cb="0"/><line nr="59" mi="10" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="82" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="16" covered="0"/><counter type="COMPLEXITY" missed="11" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="2" covered="0"/></sourcefile><sourcefile name="FinCons.java"><line nr="12" mi="2" ci="0" mb="0" cb="0"/><line nr="13" mi="3" ci="0" mb="0" cb="0"/><line nr="14" mi="3" ci="0" mb="0" cb="0"/><line nr="15" mi="1" ci="0" mb="0" cb="0"/><line nr="18" mi="6" ci="0" mb="0" cb="0"/><line nr="23" mi="4" ci="0" mb="0" cb="0"/><line nr="28" mi="3" ci="0" mb="0" cb="0"/><line nr="34" mi="6" ci="0" mb="0" cb="0"/><line nr="40" mi="5" ci="0" mb="2" cb="0"/><line nr="41" mi="9" ci="0" mb="4" cb="0"/><line nr="42" mi="3" ci="0" mb="0" cb="0"/><line nr="43" mi="16" ci="0" mb="4" cb="0"/><line nr="48" mi="18" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="79" covered="0"/><counter type="BRANCH" missed="10" covered="0"/><counter type="LINE" missed="13" covered="0"/><counter type="COMPLEXITY" missed="12" covered="0"/><counter type="METHOD" missed="7" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="List.java"><line nr="20" mi="6" ci="0" mb="0" cb="0"/><line nr="24" mi="4" ci="0" mb="4" cb="0"/><line nr="25" mi="5" ci="0" mb="0" cb="0"/><line nr="27" mi="6" ci="0" mb="2" cb="0"/><line nr="28" mi="6" ci="0" mb="0" cb="0"/><line nr="30" mi="7" ci="0" mb="0" cb="0"/><line nr="35" mi="14" ci="0" mb="0" cb="0"/><line nr="39" mi="2" ci="0" mb="2" cb="0"/><line nr="40" mi="2" ci="0" mb="0" cb="0"/><line nr="42" mi="9" ci="0" mb="0" cb="0"/><line nr="47" mi="2" ci="0" mb="0" cb="0"/><line nr="51" mi="5" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="68" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="12" covered="0"/><counter type="COMPLEXITY" missed="11" covered="0"/><counter type="METHOD" missed="7" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="InfiniteList.java"><line nr="10" mi="3" ci="0" mb="0" cb="0"/><line nr="26" mi="4" ci="0" mb="0" cb="0"/><line nr="31" mi="5" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="3" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="720" covered="0"/><counter type="BRANCH" missed="42" covered="0"/><counter type="LINE" missed="117" covered="0"/><counter type="COMPLEXITY" missed="108" covered="0"/><counter type="METHOD" missed="87" covered="0"/><counter type="CLASS" missed="14" covered="0"/></package><package name="com/dan323/functional/data/either"><class name="com/dan323/functional/data/either/LeftAlternative" sourcefilename="LeftAlternative.java"><method name="&lt;init&gt;" desc="(Lcom/dan323/functional/annotation/algs/IMonoid;)V" line="13"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="empty" desc="()Lcom/dan323/functional/data/either/Either;" line="18"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="disjunction" desc="(Lcom/dan323/functional/data/either/Either;Lcom/dan323/functional/data/either/Either;)Lcom/dan323/functional/data/either/Either;" line="22"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getClassAtRuntime" desc="()Ljava/lang/Class;" line="27"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$disjunction$0" desc="(Lcom/dan323/functional/data/either/Either;Ljava/lang/Object;)Lcom/dan323/functional/data/either/Either;" line="22"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="22" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/either/Right" sourcefilename="Right.java"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;)V" line="10"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="either" desc="(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/lang/Object;" line="15"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="24"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hashCode" desc="()I" line="31"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="37"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="49" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="11" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/either/Either" sourcefilename="Either.java"><method name="left" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/either/Either;" line="10"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="right" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/either/Either;" line="14"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/either/LeftEither" sourcefilename="LeftEither.java"><method name="&lt;init&gt;" desc="()V" line="11"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getInstance" desc="()Lcom/dan323/functional/data/either/LeftEither;" line="13"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Lcom/dan323/functional/data/either/Either;Ljava/util/function/Function;)Lcom/dan323/functional/data/either/Either;" line="16"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pure" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/either/Either;" line="20"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="flatMap" desc="(Ljava/util/function/Function;Lcom/dan323/functional/data/either/Either;)Lcom/dan323/functional/data/either/Either;" line="24"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="fapply" desc="(Lcom/dan323/functional/data/either/Either;Lcom/dan323/functional/data/either/Either;)Lcom/dan323/functional/data/either/Either;" line="28"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="join" desc="(Lcom/dan323/functional/data/either/Either;)Lcom/dan323/functional/data/either/Either;" line="32"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getClassAtRuntime" desc="()Ljava/lang/Class;" line="37"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$fapply$0" desc="(Lcom/dan323/functional/data/either/Either;Ljava/util/function/Function;)Lcom/dan323/functional/data/either/Either;" line="28"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="45" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/either/Left" sourcefilename="Left.java"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;)V" line="10"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="either" desc="(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/lang/Object;" line="15"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="24"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hashCode" desc="()I" line="31"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="36"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="49" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="11" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/either/RightEither" sourcefilename="RightEither.java"><method name="getInstance" desc="()Lcom/dan323/functional/data/either/RightEither;" line="15"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Lcom/dan323/functional/data/either/Either;Ljava/util/function/Function;)Lcom/dan323/functional/data/either/Either;" line="18"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pure" desc="(Ljava/lang/Object;)Lcom/dan323/functional/data/either/Either;" line="22"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="join" desc="(Lcom/dan323/functional/data/either/Either;)Lcom/dan323/functional/data/either/Either;" line="26"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="flatMap" desc="(Ljava/util/function/Function;Lcom/dan323/functional/data/either/Either;)Lcom/dan323/functional/data/either/Either;" line="30"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="fapply" desc="(Lcom/dan323/functional/data/either/Either;Lcom/dan323/functional/data/either/Either;)Lcom/dan323/functional/data/either/Either;" line="34"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getClassAtRuntime" desc="()Ljava/lang/Class;" line="39"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$fapply$1" desc="(Lcom/dan323/functional/data/either/Either;Ljava/util/function/Function;)Lcom/dan323/functional/data/either/Either;" line="34"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$map$0" desc="(Ljava/util/function/Function;Ljava/lang/Object;)Lcom/dan323/functional/data/either/Either;" line="18"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="46" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="RightEither.java"><line nr="15" mi="4" ci="0" mb="0" cb="0"/><line nr="18" mi="12" ci="0" mb="0" cb="0"/><line nr="22" mi="3" ci="0" mb="0" cb="0"/><line nr="26" mi="6" ci="0" mb="0" cb="0"/><line nr="30" mi="6" ci="0" mb="0" cb="0"/><line nr="34" mi="13" ci="0" mb="0" cb="0"/><line nr="39" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="46" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="LeftAlternative.java"><line nr="13" mi="2" ci="0" mb="0" cb="0"/><line nr="14" mi="3" ci="0" mb="0" cb="0"/><line nr="15" mi="1" ci="0" mb="0" cb="0"/><line nr="18" mi="5" ci="0" mb="0" cb="0"/><line nr="22" mi="9" ci="0" mb="0" cb="0"/><line nr="27" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="22" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="Left.java"><line nr="10" mi="2" ci="0" mb="0" cb="0"/><line nr="11" mi="3" ci="0" mb="0" cb="0"/><line nr="12" mi="1" ci="0" mb="0" cb="0"/><line nr="15" mi="2" ci="0" mb="2" cb="0"/><line nr="16" mi="4" ci="0" mb="0" cb="0"/><line nr="18" mi="5" ci="0" mb="0" cb="0"/><line nr="24" mi="5" ci="0" mb="2" cb="0"/><line nr="25" mi="9" ci="0" mb="4" cb="0"/><line nr="26" mi="7" ci="0" mb="0" cb="0"/><line nr="31" mi="6" ci="0" mb="0" cb="0"/><line nr="36" mi="5" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="49" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="11" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="LeftEither.java"><line nr="11" mi="3" ci="0" mb="0" cb="0"/><line nr="13" mi="4" ci="0" mb="0" cb="0"/><line nr="16" mi="8" ci="0" mb="0" cb="0"/><line nr="20" mi="3" ci="0" mb="0" cb="0"/><line nr="24" mi="6" ci="0" mb="0" cb="0"/><line nr="28" mi="13" ci="0" mb="0" cb="0"/><line nr="32" mi="6" ci="0" mb="0" cb="0"/><line nr="37" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="45" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="Right.java"><line nr="10" mi="2" ci="0" mb="0" cb="0"/><line nr="11" mi="3" ci="0" mb="0" cb="0"/><line nr="12" mi="1" ci="0" mb="0" cb="0"/><line nr="15" mi="2" ci="0" mb="2" cb="0"/><line nr="16" mi="4" ci="0" mb="0" cb="0"/><line nr="18" mi="5" ci="0" mb="0" cb="0"/><line nr="24" mi="5" ci="0" mb="2" cb="0"/><line nr="25" mi="9" ci="0" mb="4" cb="0"/><line nr="26" mi="7" ci="0" mb="0" cb="0"/><line nr="31" mi="6" ci="0" mb="0" cb="0"/><line nr="37" mi="5" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="49" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="11" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="Either.java"><line nr="10" mi="5" ci="0" mb="0" cb="0"/><line nr="14" mi="5" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="221" covered="0"/><counter type="BRANCH" missed="16" covered="0"/><counter type="LINE" missed="45" covered="0"/><counter type="COMPLEXITY" missed="43" covered="0"/><counter type="METHOD" missed="35" covered="0"/><counter type="CLASS" missed="6" covered="0"/></package><package name="com/dan323/functional/data/bool"><class name="com/dan323/functional/data/bool/AndMonoid" sourcefilename="AndMonoid.java"><method name="op" desc="(Ljava/lang/Boolean;Ljava/lang/Boolean;)Ljava/lang/Boolean;" line="12"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unit" desc="()Ljava/lang/Boolean;" line="16"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="19"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="3" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/bool/OrMonoid" sourcefilename="OrMonoid.java"><method name="op" desc="(Ljava/lang/Boolean;Ljava/lang/Boolean;)Ljava/lang/Boolean;" line="12"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unit" desc="()Ljava/lang/Boolean;" line="16"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="19"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="3" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="AndMonoid.java"><line nr="12" mi="11" ci="0" mb="4" cb="0"/><line nr="16" mi="2" ci="0" mb="0" cb="0"/><line nr="19" mi="5" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="3" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="OrMonoid.java"><line nr="12" mi="11" ci="0" mb="4" cb="0"/><line nr="16" mi="2" ci="0" mb="0" cb="0"/><line nr="19" mi="5" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="3" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="36" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="10" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="2" covered="0"/></package><package name="com/dan323/functional/data/util/applicative"><class name="com/dan323/functional/data/util/applicative/ApplicativeSemigroup" sourcefilename="ApplicativeSemigroup.java"><method name="&lt;init&gt;" desc="(Lcom/dan323/functional/annotation/algs/ISemigroup;Lcom/dan323/functional/annotation/funcs/IApplicative;)V" line="17"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="op" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="23"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$op$0" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="23"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="3" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/data/util/applicative/ApplicativeMonoid" sourcefilename="ApplicativeMonoid.java"><method name="&lt;init&gt;" desc="(Lcom/dan323/functional/annotation/algs/IMonoid;Lcom/dan323/functional/annotation/funcs/IApplicative;)V" line="13"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unit" desc="()Ljava/lang/Object;" line="17"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="ApplicativeSemigroup.java"><line nr="17" mi="2" ci="0" mb="0" cb="0"/><line nr="18" mi="3" ci="0" mb="0" cb="0"/><line nr="19" mi="3" ci="0" mb="0" cb="0"/><line nr="20" mi="1" ci="0" mb="0" cb="0"/><line nr="23" mi="14" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="3" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="ApplicativeMonoid.java"><line nr="13" mi="4" ci="0" mb="0" cb="0"/><line nr="14" mi="1" ci="0" mb="0" cb="0"/><line nr="17" mi="8" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="36" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="2" covered="0"/></package><counter type="INSTRUCTION" missed="2248" covered="0"/><counter type="BRANCH" missed="110" covered="0"/><counter type="LINE" missed="393" covered="0"/><counter type="COMPLEXITY" missed="381" covered="0"/><counter type="METHOD" missed="326" covered="0"/><counter type="CLASS" missed="55" covered="0"/></group><group name="functional-compiler"><package name="com/dan323/functional/annotation/compiler/internal"><class name="com/dan323/functional/annotation/compiler/internal/CompilerFactory" sourcefilename="CompilerFactory.java"><method name="&lt;init&gt;" desc="()V" line="14"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="from" desc="(Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/util/Elements;Ljavax/lang/model/util/Types;Ljavax/annotation/processing/Messager;)Lcom/dan323/functional/annotation/compiler/internal/Compiler;" line="26"><counter type="INSTRUCTION" missed="29" covered="108"/><counter type="BRANCH" missed="3" covered="11"/><counter type="LINE" missed="3" covered="13"/><counter type="COMPLEXITY" missed="2" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="29" covered="111"/><counter type="BRANCH" missed="3" covered="11"/><counter type="LINE" missed="3" covered="14"/><counter type="COMPLEXITY" missed="2" covered="7"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/dan323/functional/annotation/compiler/internal/FunctionalDependencyTree" sourcefilename="FunctionalDependencyTree.java"><method name="&lt;init&gt;" desc="(Ljava/lang/Class;)V" line="16"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="addDependency" desc="(Lcom/dan323/functional/annotation/compiler/internal/FunctionalDependencyTree;)V" line="22"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getActualTree" desc="()Ljava/util/List;" line="31"><counter type="INSTRUCTION" missed="0" covered="64"/><counter type="LINE" missed="0" covered="15"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNode" desc="()Ljava/lang/Class;" line="49"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNextLine" desc="(Lcom/dan323/functional/annotation/compiler/internal/FunctionalDependencyTree;)Ljava/util/List;" line="53"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="87"/><counter type="LINE" missed="0" covered="23"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/dan323/functional/annotation/compiler/internal/CompilerUtils" sourcefilename="CompilerUtils.java"><method name="&lt;init&gt;" desc="()V" line="14"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="changeWildBy" desc="(Ljavax/lang/model/util/Types;Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/type/TypeMirror;)Ljavax/lang/model/type/DeclaredType;" line="17"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getAllMaximalFunctionalInterfaces" desc="(Ljavax/lang/model/util/Elements;Ljavax/lang/model/util/Types;Ljavax/lang/model/element/TypeElement;)Ljava/util/List;" line="32"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isMaximal" desc="(Ljavax/lang/model/util/Elements;Ljavax/lang/model/type/DeclaredType;Ljava/util/List;)Z" line="40"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isMaximalRec" desc="(Ljavax/lang/model/util/Elements;Ljava/util/List;Ljavax/lang/model/type/DeclaredType;Ljava/util/List;)Z" line="45"><counter type="INSTRUCTION" missed="6" covered="50"/><counter type="BRANCH" missed="2" covered="6"/><counter type="LINE" missed="2" covered="9"/><counter type="COMPLEXITY" missed="2" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isStrucutre" desc="(Ljavax/lang/model/util/Elements;Ljavax/lang/model/util/Types;Ljavax/lang/model/type/DeclaredType;)Z" line="62"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isMaximalRec$5" desc="(Lcom/dan323/functional/annotation/compiler/internal/FunctionalDependencyTree;)Ljava/util/stream/Stream;" line="57"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isMaximalRec$4" desc="(Ljavax/lang/model/element/TypeElement;Ljavax/lang/model/element/Element;)Z" line="53"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$getAllMaximalFunctionalInterfaces$3" desc="(Ljavax/lang/model/util/Elements;Ljava/util/List;Ljavax/lang/model/type/DeclaredType;)Z" line="36"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$getAllMaximalFunctionalInterfaces$2" desc="(Ljavax/lang/model/util/Elements;Ljavax/lang/model/util/Types;Ljavax/lang/model/type/DeclaredType;)Z" line="34"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$getAllMaximalFunctionalInterfaces$1" desc="(Ljavax/lang/model/type/TypeMirror;)Ljavax/lang/model/type/DeclaredType;" line="33"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$changeWildBy$0" desc="(Ljavax/lang/model/type/TypeMirror;Ljavax/lang/model/type/TypeMirror;)Ljavax/lang/model/type/TypeMirror;" line="22"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="9" covered="143"/><counter type="BRANCH" missed="2" covered="8"/><counter type="LINE" missed="3" covered="26"/><counter type="COMPLEXITY" missed="3" covered="14"/><counter type="METHOD" missed="1" covered="11"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/dan323/functional/annotation/compiler/internal/Compiler" sourcefilename="Compiler.java"><method name="&lt;init&gt;" desc="(Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;Ljava/lang/Class;Ljavax/annotation/processing/Messager;)V" line="22"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="process" desc="(Ljavax/lang/model/element/TypeElement;)V" line="34"><counter type="INSTRUCTION" missed="1" covered="86"/><counter type="BRANCH" missed="1" covered="11"/><counter type="LINE" missed="1" covered="19"/><counter type="COMPLEXITY" missed="1" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="error" desc="(Ljava/lang/String;[Ljava/lang/Object;)V" line="68"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$process$5" desc="(Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="53"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$process$4" desc="(Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;Ljava/util/function/UnaryOperator;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="51"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$process$3" desc="(Ljavax/lang/model/element/ExecutableElement;)Ljava/util/function/UnaryOperator;" line="49"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$process$2" desc="(Ljavax/lang/model/element/ExecutableElement;Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="49"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$process$1" desc="(Ljavax/lang/model/element/Element;)Ljavax/lang/model/element/ExecutableElement;" line="48"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$process$0" desc="(Ljavax/lang/model/element/Element;)Z" line="47"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="6" covered="135"/><counter type="BRANCH" missed="1" covered="15"/><counter type="LINE" missed="2" covered="27"/><counter type="COMPLEXITY" missed="2" covered="15"/><counter type="METHOD" missed="1" covered="8"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="CompilerUtils.java"><line nr="14" mi="3" ci="0" mb="0" cb="0"/><line nr="17" mi="0" ci="3" mb="0" cb="0"/><line nr="18" mi="0" ci="5" mb="0" cb="0"/><line nr="20" mi="0" ci="5" mb="0" cb="0"/><line nr="21" mi="0" ci="1" mb="0" cb="0"/><line nr="22" mi="0" ci="5" mb="0" cb="2"/><line nr="23" mi="0" ci="2" mb="0" cb="0"/><line nr="25" mi="0" ci="2" mb="0" cb="0"/><line nr="27" mi="0" ci="6" mb="0" cb="0"/><line nr="28" mi="0" ci="7" mb="0" cb="0"/><line nr="32" mi="0" ci="4" mb="0" cb="0"/><line nr="33" mi="0" ci="7" mb="0" cb="0"/><line nr="34" mi="0" ci="6" mb="0" cb="0"/><line nr="35" mi="0" ci="2" mb="0" cb="0"/><line nr="36" mi="0" ci="13" mb="0" cb="0"/><line nr="40" mi="0" ci="2" mb="0" cb="0"/><line nr="41" mi="0" ci="6" mb="0" cb="0"/><line nr="45" mi="0" ci="3" mb="1" cb="1"/><line nr="46" mi="2" ci="0" mb="0" cb="0"/><line nr="48" mi="0" ci="5" mb="0" cb="0"/><line nr="49" mi="0" ci="10" mb="0" cb="2"/><line nr="50" mi="0" ci="6" mb="0" cb="0"/><line nr="51" mi="0" ci="5" mb="0" cb="2"/><line nr="52" mi="0" ci="2" mb="0" cb="0"/><line nr="53" mi="0" ci="12" mb="1" cb="1"/><line nr="54" mi="4" ci="0" mb="0" cb="0"/><line nr="56" mi="0" ci="1" mb="0" cb="0"/><line nr="57" mi="0" ci="14" mb="0" cb="0"/><line nr="62" mi="0" ci="9" mb="0" cb="0"/><counter type="INSTRUCTION" missed="9" covered="143"/><counter type="BRANCH" missed="2" covered="8"/><counter type="LINE" missed="3" covered="26"/><counter type="COMPLEXITY" missed="3" covered="14"/><counter type="METHOD" missed="1" covered="11"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Compiler.java"><line nr="22" mi="0" ci="2" mb="0" cb="0"/><line nr="23" mi="0" ci="3" mb="0" cb="0"/><line nr="24" mi="0" ci="3" mb="0" cb="0"/><line nr="25" mi="0" ci="3" mb="0" cb="0"/><line nr="26" mi="0" ci="1" mb="0" cb="0"/><line nr="34" mi="0" ci="2" mb="0" cb="0"/><line nr="35" mi="0" ci="5" mb="0" cb="2"/><line nr="36" mi="0" ci="5" mb="0" cb="0"/><line nr="39" mi="0" ci="5" mb="0" cb="2"/><line nr="40" mi="0" ci="10" mb="0" cb="0"/><line nr="42" mi="0" ci="2" mb="0" cb="0"/><line nr="44" mi="0" ci="3" mb="0" cb="0"/><line nr="46" mi="0" ci="4" mb="0" cb="0"/><line nr="47" mi="0" ci="16" mb="0" cb="4"/><line nr="48" mi="0" ci="5" mb="0" cb="0"/><line nr="49" mi="0" ci="11" mb="0" cb="0"/><line nr="50" mi="0" ci="3" mb="0" cb="0"/><line nr="51" mi="0" ci="5" mb="0" cb="0"/><line nr="53" mi="5" ci="0" mb="0" cb="0"/><line nr="55" mi="0" ci="3" mb="0" cb="0"/><line nr="56" mi="0" ci="6" mb="1" cb="1"/><line nr="57" mi="1" ci="0" mb="0" cb="0"/><line nr="59" mi="0" ci="6" mb="0" cb="0"/><line nr="61" mi="0" ci="7" mb="0" cb="4"/><line nr="62" mi="0" ci="2" mb="0" cb="2"/><line nr="63" mi="0" ci="14" mb="0" cb="0"/><line nr="65" mi="0" ci="1" mb="0" cb="0"/><line nr="68" mi="0" ci="7" mb="0" cb="0"/><line nr="69" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="6" covered="135"/><counter type="BRANCH" missed="1" covered="15"/><counter type="LINE" missed="2" covered="27"/><counter type="COMPLEXITY" missed="2" covered="15"/><counter type="METHOD" missed="1" covered="8"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CompilerFactory.java"><line nr="14" mi="0" ci="3" mb="0" cb="0"/><line nr="26" mi="0" ci="6" mb="0" cb="0"/><line nr="27" mi="0" ci="8" mb="0" cb="2"/><line nr="28" mi="0" ci="9" mb="0" cb="0"/><line nr="29" mi="0" ci="8" mb="0" cb="2"/><line nr="30" mi="0" ci="9" mb="0" cb="0"/><line nr="31" mi="0" ci="8" mb="0" cb="2"/><line nr="32" mi="0" ci="9" mb="0" cb="0"/><line nr="33" mi="0" ci="8" mb="0" cb="2"/><line nr="34" mi="0" ci="9" mb="0" cb="0"/><line nr="35" mi="0" ci="8" mb="0" cb="2"/><line nr="36" mi="0" ci="9" mb="0" cb="0"/><line nr="37" mi="0" ci="8" mb="1" cb="1"/><line nr="38" mi="0" ci="9" mb="0" cb="0"/><line nr="39" mi="8" ci="0" mb="2" cb="0"/><line nr="40" mi="9" ci="0" mb="0" cb="0"/><line nr="42" mi="12" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="29" covered="111"/><counter type="BRANCH" missed="3" covered="11"/><counter type="LINE" missed="3" covered="14"/><counter type="COMPLEXITY" missed="2" covered="7"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="FunctionalDependencyTree.java"><line nr="16" mi="0" ci="2" mb="0" cb="0"/><line nr="17" mi="0" ci="3" mb="0" cb="0"/><line nr="18" mi="0" ci="5" mb="0" cb="0"/><line nr="19" mi="0" ci="1" mb="0" cb="0"/><line nr="22" mi="0" ci="5" mb="0" cb="0"/><line nr="23" mi="0" ci="1" mb="0" cb="0"/><line nr="31" mi="0" ci="5" mb="0" cb="0"/><line nr="32" mi="0" ci="5" mb="0" cb="0"/><line nr="33" mi="0" ci="5" mb="0" cb="0"/><line nr="34" mi="0" ci="5" mb="0" cb="0"/><line nr="35" mi="0" ci="5" mb="0" cb="0"/><line nr="36" mi="0" ci="5" mb="0" cb="0"/><line nr="37" mi="0" ci="5" mb="0" cb="0"/><line nr="38" mi="0" ci="5" mb="0" cb="0"/><line nr="39" mi="0" ci="3" mb="0" cb="0"/><line nr="40" mi="0" ci="3" mb="0" cb="0"/><line nr="41" mi="0" ci="3" mb="0" cb="0"/><line nr="42" mi="0" ci="3" mb="0" cb="0"/><line nr="43" mi="0" ci="3" mb="0" cb="0"/><line nr="44" mi="0" ci="3" mb="0" cb="0"/><line nr="45" mi="0" ci="6" mb="0" cb="0"/><line nr="49" mi="0" ci="3" mb="0" cb="0"/><line nr="53" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="87"/><counter type="LINE" missed="0" covered="23"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="44" covered="476"/><counter type="BRANCH" missed="6" covered="34"/><counter type="LINE" missed="8" covered="90"/><counter type="COMPLEXITY" missed="7" covered="41"/><counter type="METHOD" missed="2" covered="26"/><counter type="CLASS" missed="0" covered="4"/></package><package name="com/dan323/functional/annotation/compiler"><class name="com/dan323/functional/annotation/compiler/FunctionalCompiler" sourcefilename="FunctionalCompiler.java"><method name="&lt;init&gt;" desc="()V" line="22"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="init" desc="(Ljavax/annotation/processing/ProcessingEnvironment;)V" line="33"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="process" desc="(Ljava/util/Set;Ljavax/annotation/processing/RoundEnvironment;)Z" line="43"><counter type="INSTRUCTION" missed="11" covered="44"/><counter type="BRANCH" missed="2" covered="4"/><counter type="LINE" missed="2" covered="9"/><counter type="COMPLEXITY" missed="2" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="error" desc="(Ljava/lang/String;[Ljava/lang/Object;)V" line="58"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getSupportedAnnotationTypes" desc="()Ljava/util/Set;" line="63"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getSupportedSourceVersion" desc="()Ljavax/lang/model/SourceVersion;" line="68"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$process$1" desc="(Ljavax/lang/model/element/TypeElement;Lcom/dan323/functional/annotation/compiler/internal/Compiler;)V" line="48"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$process$0" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/Compiler;" line="47"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="29"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="19" covered="102"/><counter type="BRANCH" missed="2" covered="4"/><counter type="LINE" missed="4" covered="19"/><counter type="COMPLEXITY" missed="3" covered="9"/><counter type="METHOD" missed="1" covered="8"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="FunctionalCompiler.java"><line nr="22" mi="0" ci="3" mb="0" cb="0"/><line nr="29" mi="0" ci="9" mb="0" cb="0"/><line nr="33" mi="0" ci="3" mb="0" cb="0"/><line nr="34" mi="0" ci="5" mb="0" cb="0"/><line nr="35" mi="0" ci="4" mb="0" cb="0"/><line nr="36" mi="0" ci="4" mb="0" cb="0"/><line nr="37" mi="0" ci="4" mb="0" cb="0"/><line nr="38" mi="0" ci="1" mb="0" cb="0"/><line nr="43" mi="0" ci="4" mb="0" cb="0"/><line nr="44" mi="0" ci="10" mb="0" cb="2"/><line nr="45" mi="0" ci="11" mb="2" cb="2"/><line nr="46" mi="0" ci="7" mb="0" cb="0"/><line nr="47" mi="0" ci="18" mb="0" cb="0"/><line nr="48" mi="0" ci="5" mb="0" cb="0"/><line nr="50" mi="0" ci="1" mb="0" cb="0"/><line nr="51" mi="1" ci="0" mb="0" cb="0"/><line nr="52" mi="10" ci="0" mb="0" cb="0"/><line nr="53" mi="0" ci="1" mb="0" cb="0"/><line nr="54" mi="0" ci="2" mb="0" cb="0"/><line nr="58" mi="7" ci="0" mb="0" cb="0"/><line nr="59" mi="1" ci="0" mb="0" cb="0"/><line nr="63" mi="0" ci="8" mb="0" cb="0"/><line nr="68" mi="0" ci="2" mb="0" cb="0"/><counter type="INSTRUCTION" missed="19" covered="102"/><counter type="BRANCH" missed="2" covered="4"/><counter type="LINE" missed="4" covered="19"/><counter type="COMPLEXITY" missed="3" covered="9"/><counter type="METHOD" missed="1" covered="8"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="19" covered="102"/><counter type="BRANCH" missed="2" covered="4"/><counter type="LINE" missed="4" covered="19"/><counter type="COMPLEXITY" missed="3" covered="9"/><counter type="METHOD" missed="1" covered="8"/><counter type="CLASS" missed="0" covered="1"/></package><package name="com/dan323/functional/annotation/compiler/internal/signature"><class name="com/dan323/functional/annotation/compiler/internal/signature/StructureSignatures" sourcefilename="StructureSignatures.java"><method name="&lt;init&gt;" desc="(Ljavax/lang/model/util/Elements;Ljavax/lang/model/util/Types;)V" line="28"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="createMapSignature" desc="(Ljavax/lang/model/type/ExecutableType;Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="34"><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="createPureSignature" desc="(Ljavax/lang/model/type/ExecutableType;Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="45"><counter type="INSTRUCTION" missed="2" covered="25"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="createSumSignature" desc="(Ljavax/lang/model/type/ExecutableType;Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="54"><counter type="INSTRUCTION" missed="32" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="createProdSignature" desc="(Ljavax/lang/model/type/ExecutableType;Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="63"><counter type="INSTRUCTION" missed="32" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="createFapplySignature" desc="(Ljavax/lang/model/type/ExecutableType;Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="72"><counter type="INSTRUCTION" missed="0" covered="65"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="createLiftA2Signature" desc="(Ljavax/lang/model/type/ExecutableType;Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="84"><counter type="INSTRUCTION" missed="0" covered="78"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="createDisjSignature" desc="(Ljavax/lang/model/type/ExecutableType;Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="97"><counter type="INSTRUCTION" missed="27" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="createEmptySignature" desc="(Ljavax/lang/model/type/ExecutableType;Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="108"><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="createJoinSignature" desc="(Ljavax/lang/model/type/ExecutableType;Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="118"><counter type="INSTRUCTION" missed="2" covered="37"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="createFlatMapSignature" desc="(Ljavax/lang/model/type/ExecutableType;Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="129"><counter type="INSTRUCTION" missed="0" covered="58"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="createOpSignature" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="141"><counter type="INSTRUCTION" missed="2" covered="24"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="createUnitSignature" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="150"><counter type="INSTRUCTION" missed="2" covered="16"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="createFoldrSignature" desc="(Ljavax/lang/model/type/ExecutableType;Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="159"><counter type="INSTRUCTION" missed="2" covered="64"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="createFoldMapSignature" desc="(Ljavax/lang/model/type/ExecutableType;Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="170"><counter type="INSTRUCTION" missed="2" covered="72"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="6"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="createTraverseSignature" desc="(Ljavax/lang/model/type/ExecutableType;Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="182"><counter type="INSTRUCTION" missed="93" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="createSequenceASignature" desc="(Ljavax/lang/model/type/ExecutableType;Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="195"><counter type="INSTRUCTION" missed="67" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mapSignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="207"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pureSignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="211"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sumSignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="215"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="prodSignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="219"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="emptySignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="223"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="disjSignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="227"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="fapplySignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="231"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftA2SignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="235"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="joinSignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="239"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMapSignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="243"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="opSignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="247"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unitSignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="251"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="foldrSignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="255"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="foldMapSignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="259"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="traverseSignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="263"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="sequenceASignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="267"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="applicativeSignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="277"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="alternativeSignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="288"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ringSignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="298"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="functorSignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="308"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="monadSignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="318"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="semigroupSignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="328"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="monoidSignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="338"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="foldableSignatureChecker" desc="(Ljavax/lang/model/type/DeclaredType;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="348"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$sequenceASignatureChecker$15" desc="(Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/type/ExecutableType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="267"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$traverseSignatureChecker$14" desc="(Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/type/ExecutableType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="263"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$foldMapSignatureChecker$13" desc="(Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/type/ExecutableType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="259"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$foldrSignatureChecker$12" desc="(Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/type/ExecutableType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="255"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unitSignatureChecker$11" desc="(Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/type/ExecutableType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="251"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$opSignatureChecker$10" desc="(Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/type/ExecutableType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="247"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$flatMapSignatureChecker$9" desc="(Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/type/ExecutableType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="243"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$joinSignatureChecker$8" desc="(Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/type/ExecutableType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="239"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$liftA2SignatureChecker$7" desc="(Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/type/ExecutableType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="235"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$fapplySignatureChecker$6" desc="(Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/type/ExecutableType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="231"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$disjSignatureChecker$5" desc="(Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/type/ExecutableType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="227"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$emptySignatureChecker$4" desc="(Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/type/ExecutableType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="223"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$prodSignatureChecker$3" desc="(Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/type/ExecutableType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="219"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$sumSignatureChecker$2" desc="(Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/type/ExecutableType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="215"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$pureSignatureChecker$1" desc="(Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/type/ExecutableType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="211"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$mapSignatureChecker$0" desc="(Ljavax/lang/model/type/DeclaredType;Ljavax/lang/model/type/ExecutableType;)Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="207"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="397" covered="703"/><counter type="BRANCH" missed="18" covered="14"/><counter type="LINE" missed="47" covered="73"/><counter type="COMPLEXITY" missed="32" covered="41"/><counter type="METHOD" missed="20" covered="37"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/dan323/functional/annotation/compiler/internal/signature/ConjNecessaryMethods" sourcefilename="ConjNecessaryMethods.java"><method name="&lt;init&gt;" desc="(Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;)V" line="18"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Ljava/util/Set;)V" line="21"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="process" desc="(Ljavax/lang/model/element/ExecutableElement;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="27"><counter type="INSTRUCTION" missed="4" covered="30"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="1" covered="8"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="42"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$process$1" desc="(Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;)Z" line="29"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$process$0" desc="(Ljavax/lang/model/element/ExecutableElement;Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="28"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="15" covered="53"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="2" covered="13"/><counter type="COMPLEXITY" missed="2" covered="7"/><counter type="METHOD" missed="1" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/dan323/functional/annotation/compiler/internal/signature/DisjNecessaryMethods" sourcefilename="DisjNecessaryMethods.java"><method name="&lt;init&gt;" desc="(Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;)V" line="17"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Ljava/util/Set;)V" line="20"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="process" desc="(Ljavax/lang/model/element/ExecutableElement;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="26"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="37"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$process$1" desc="(Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;)Z" line="27"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$process$0" desc="(Ljavax/lang/model/element/ExecutableElement;Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="26"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/dan323/functional/annotation/compiler/internal/signature/EmptyNecessaryMethods" sourcefilename="EmptyNecessaryMethods.java"><method name="&lt;init&gt;" desc="()V" line="10"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="process" desc="(Ljavax/lang/model/element/ExecutableElement;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="13"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="18"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="2" covered="5"/><counter type="LINE" missed="1" covered="2"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="1" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods" sourcefilename="NecessaryMethods.java"/><class name="com/dan323/functional/annotation/compiler/internal/signature/Signature$InvalidSignature" sourcefilename="Signature.java"><method name="&lt;init&gt;" desc="()V" line="56"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="verifyMethod" desc="(Ljavax/lang/model/element/ExecutableElement;)Z" line="63"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="59"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/dan323/functional/annotation/compiler/internal/signature/FunctionSignature" sourcefilename="FunctionSignature.java"><method name="&lt;init&gt;" desc="(Ljava/util/function/Function;Ljava/lang/String;)V" line="17"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="process" desc="(Ljavax/lang/model/element/ExecutableElement;)Lcom/dan323/functional/annotation/compiler/internal/signature/NecessaryMethods;" line="30"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="38"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/dan323/functional/annotation/compiler/internal/signature/Signature" sourcefilename="Signature.java"><method name="&lt;init&gt;" desc="(Ljava/util/List;Ljavax/lang/model/type/TypeMirror;Ljava/lang/String;)V" line="17"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="verifyMethod" desc="(Ljavax/lang/model/element/ExecutableElement;)Z" line="30"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="verifyInputs" desc="(Ljavax/lang/model/element/ExecutableElement;)Z" line="37"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invalid" desc="()Lcom/dan323/functional/annotation/compiler/internal/signature/Signature;" line="50"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="74"/><counter type="BRANCH" missed="2" covered="10"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="2" covered="8"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="ConjNecessaryMethods.java"><line nr="18" mi="0" ci="5" mb="0" cb="0"/><line nr="19" mi="0" ci="1" mb="0" cb="0"/><line nr="21" mi="0" ci="2" mb="0" cb="0"/><line nr="22" mi="0" ci="3" mb="0" cb="0"/><line nr="23" mi="0" ci="1" mb="0" cb="0"/><line nr="27" mi="0" ci="5" mb="0" cb="0"/><line nr="28" mi="0" ci="6" mb="0" cb="0"/><line nr="29" mi="0" ci="8" mb="0" cb="2"/><line nr="30" mi="0" ci="4" mb="0" cb="0"/><line nr="31" mi="0" ci="4" mb="0" cb="2"/><line nr="32" mi="0" ci="6" mb="0" cb="0"/><line nr="33" mi="0" ci="3" mb="1" cb="1"/><line nr="34" mi="4" ci="0" mb="0" cb="0"/><line nr="36" mi="0" ci="5" mb="0" cb="0"/><line nr="42" mi="11" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="15" covered="53"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="2" covered="13"/><counter type="COMPLEXITY" missed="2" covered="7"/><counter type="METHOD" missed="1" covered="5"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="FunctionSignature.java"><line nr="17" mi="0" ci="2" mb="0" cb="0"/><line nr="18" mi="0" ci="3" mb="0" cb="0"/><line nr="19" mi="0" ci="3" mb="0" cb="0"/><line nr="20" mi="0" ci="1" mb="0" cb="0"/><line nr="30" mi="0" ci="10" mb="0" cb="2"/><line nr="31" mi="0" ci="4" mb="0" cb="0"/><line nr="33" mi="0" ci="2" mb="0" cb="0"/><line nr="38" mi="0" ci="4" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Signature.java"><line nr="17" mi="0" ci="2" mb="0" cb="0"/><line nr="18" mi="0" ci="3" mb="0" cb="0"/><line nr="19" mi="0" ci="3" mb="0" cb="0"/><line nr="20" mi="0" ci="3" mb="0" cb="0"/><line nr="21" mi="0" ci="1" mb="0" cb="0"/><line nr="30" mi="0" ci="10" mb="0" cb="2"/><line nr="31" mi="0" ci="7" mb="0" cb="2"/><line nr="32" mi="0" ci="8" mb="0" cb="2"/><line nr="33" mi="0" ci="5" mb="1" cb="1"/><line nr="37" mi="0" ci="2" mb="0" cb="0"/><line nr="38" mi="0" ci="11" mb="1" cb="3"/><line nr="39" mi="0" ci="15" mb="0" cb="0"/><line nr="41" mi="0" ci="2" mb="0" cb="0"/><line nr="50" mi="0" ci="2" mb="0" cb="0"/><line nr="56" mi="0" ci="5" mb="0" cb="0"/><line nr="57" mi="0" ci="1" mb="0" cb="0"/><line nr="59" mi="0" ci="5" mb="0" cb="0"/><line nr="63" mi="0" ci="2" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="87"/><counter type="BRANCH" missed="2" covered="10"/><counter type="LINE" missed="0" covered="18"/><counter type="COMPLEXITY" missed="2" covered="11"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="DisjNecessaryMethods.java"><line nr="17" mi="0" ci="5" mb="0" cb="0"/><line nr="18" mi="0" ci="1" mb="0" cb="0"/><line nr="20" mi="0" ci="2" mb="0" cb="0"/><line nr="21" mi="0" ci="3" mb="0" cb="0"/><line nr="22" mi="0" ci="1" mb="0" cb="0"/><line nr="26" mi="0" ci="14" mb="0" cb="0"/><line nr="27" mi="0" ci="8" mb="0" cb="0"/><line nr="28" mi="0" ci="2" mb="0" cb="2"/><line nr="29" mi="0" ci="4" mb="0" cb="0"/><line nr="31" mi="0" ci="5" mb="0" cb="0"/><line nr="37" mi="0" ci="11" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="EmptyNecessaryMethods.java"><line nr="10" mi="0" ci="3" mb="0" cb="0"/><line nr="13" mi="0" ci="2" mb="0" cb="0"/><line nr="18" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="2" covered="5"/><counter type="LINE" missed="1" covered="2"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="1" covered="2"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="NecessaryMethods.java"/><sourcefile name="StructureSignatures.java"><line nr="28" mi="0" ci="2" mb="0" cb="0"/><line nr="29" mi="0" ci="3" mb="0" cb="0"/><line nr="30" mi="0" ci="3" mb="0" cb="0"/><line nr="31" mi="0" ci="1" mb="0" cb="0"/><line nr="34" mi="0" ci="3" mb="0" cb="0"/><line nr="35" mi="0" ci="4" mb="0" cb="2"/><line nr="36" mi="0" ci="22" mb="0" cb="0"/><line nr="37" mi="0" ci="19" mb="0" cb="0"/><line nr="38" mi="0" ci="5" mb="0" cb="0"/><line nr="40" mi="0" ci="2" mb="0" cb="0"/><line nr="45" mi="0" ci="3" mb="0" cb="0"/><line nr="46" mi="0" ci="4" mb="1" cb="1"/><line nr="47" mi="0" ci="18" mb="0" cb="0"/><line nr="49" mi="2" ci="0" mb="0" cb="0"/><line nr="54" mi="3" ci="0" mb="0" cb="0"/><line nr="55" mi="4" ci="0" mb="2" cb="0"/><line nr="56" mi="23" ci="0" mb="0" cb="0"/><line nr="58" mi="2" ci="0" mb="0" cb="0"/><line nr="63" mi="3" ci="0" mb="0" cb="0"/><line nr="64" mi="4" ci="0" mb="2" cb="0"/><line nr="65" mi="23" ci="0" mb="0" cb="0"/><line nr="67" mi="2" ci="0" mb="0" cb="0"/><line nr="72" mi="0" ci="3" mb="0" cb="0"/><line nr="73" mi="0" ci="4" mb="0" cb="2"/><line nr="74" mi="0" ci="9" mb="0" cb="0"/><line nr="75" mi="0" ci="29" mb="0" cb="0"/><line nr="76" mi="0" ci="9" mb="0" cb="0"/><line nr="77" mi="0" ci="9" mb="0" cb="0"/><line nr="79" mi="0" ci="2" mb="0" cb="0"/><line nr="84" mi="0" ci="3" mb="0" cb="0"/><line nr="85" mi="0" ci="4" mb="0" cb="2"/><line nr="86" mi="0" ci="32" mb="0" cb="0"/><line nr="87" mi="0" ci="9" mb="0" cb="0"/><line nr="88" mi="0" ci="9" mb="0" cb="0"/><line nr="89" mi="0" ci="9" mb="0" cb="0"/><line nr="90" mi="0" ci="10" mb="0" cb="0"/><line nr="92" mi="0" ci="2" mb="0" cb="0"/><line nr="97" mi="3" ci="0" mb="0" cb="0"/><line nr="98" mi="4" ci="0" mb="2" cb="0"/><line nr="99" mi="9" ci="0" mb="0" cb="0"/><line nr="100" mi="9" ci="0" mb="0" cb="0"/><line nr="102" mi="2" ci="0" mb="0" cb="0"/><line nr="108" mi="3" ci="0" mb="0" cb="0"/><line nr="109" mi="4" ci="0" mb="2" cb="0"/><line nr="110" mi="9" ci="0" mb="0" cb="0"/><line nr="111" mi="7" ci="0" mb="0" cb="0"/><line nr="113" mi="2" ci="0" mb="0" cb="0"/><line nr="118" mi="0" ci="3" mb="0" cb="0"/><line nr="119" mi="0" ci="4" mb="1" cb="1"/><line nr="120" mi="0" ci="13" mb="0" cb="0"/><line nr="121" mi="0" ci="9" mb="0" cb="0"/><line nr="122" mi="0" ci="8" mb="0" cb="0"/><line nr="124" mi="2" ci="0" mb="0" cb="0"/><line nr="129" mi="0" ci="3" mb="0" cb="0"/><line nr="130" mi="0" ci="4" mb="0" cb="2"/><line nr="131" mi="0" ci="9" mb="0" cb="0"/><line nr="132" mi="0" ci="22" mb="0" cb="0"/><line nr="133" mi="0" ci="9" mb="0" cb="0"/><line nr="134" mi="0" ci="9" mb="0" cb="0"/><line nr="136" mi="0" ci="2" mb="0" cb="0"/><line nr="141" mi="0" ci="3" mb="0" cb="0"/><line nr="142" mi="0" ci="3" mb="1" cb="1"/><line nr="143" mi="0" ci="18" mb="0" cb="0"/><line nr="145" mi="2" ci="0" mb="0" cb="0"/><line nr="150" mi="0" ci="3" mb="0" cb="0"/><line nr="151" mi="0" ci="3" mb="1" cb="1"/><line nr="152" mi="0" ci="10" mb="0" cb="0"/><line nr="154" mi="2" ci="0" mb="0" cb="0"/><line nr="159" mi="0" ci="3" mb="0" cb="0"/><line nr="160" mi="0" ci="4" mb="1" cb="1"/><line nr="161" mi="0" ci="32" mb="0" cb="0"/><line nr="162" mi="0" ci="9" mb="0" cb="0"/><line nr="163" mi="0" ci="16" mb="0" cb="0"/><line nr="165" mi="2" ci="0" mb="0" cb="0"/><line nr="170" mi="0" ci="3" mb="0" cb="0"/><line nr="171" mi="0" ci="4" mb="1" cb="1"/><line nr="172" mi="0" ci="25" mb="0" cb="0"/><line nr="173" mi="0" ci="9" mb="0" cb="0"/><line nr="174" mi="0" ci="18" mb="0" cb="0"/><line nr="175" mi="0" ci="13" mb="0" cb="0"/><line nr="177" mi="2" ci="0" mb="0" cb="0"/><line nr="182" mi="3" ci="0" mb="0" cb="0"/><line nr="183" mi="4" ci="0" mb="2" cb="0"/><line nr="184" mi="25" ci="0" mb="0" cb="0"/><line nr="185" mi="9" ci="0" mb="0" cb="0"/><line nr="186" mi="18" ci="0" mb="0" cb="0"/><line nr="187" mi="18" ci="0" mb="0" cb="0"/><line nr="188" mi="14" ci="0" mb="0" cb="0"/><line nr="190" mi="2" ci="0" mb="0" cb="0"/><line nr="195" mi="3" ci="0" mb="0" cb="0"/><line nr="196" mi="4" ci="0" mb="2" cb="0"/><line nr="197" mi="9" ci="0" mb="0" cb="0"/><line nr="198" mi="18" ci="0" mb="0" cb="0"/><line nr="199" mi="18" ci="0" mb="0" cb="0"/><line nr="200" mi="13" ci="0" mb="0" cb="0"/><line nr="202" mi="2" ci="0" mb="0" cb="0"/><line nr="207" mi="0" ci="13" mb="0" cb="0"/><line nr="211" mi="0" ci="13" mb="0" cb="0"/><line nr="215" mi="13" ci="0" mb="0" cb="0"/><line nr="219" mi="13" ci="0" mb="0" cb="0"/><line nr="223" mi="13" ci="0" mb="0" cb="0"/><line nr="227" mi="13" ci="0" mb="0" cb="0"/><line nr="231" mi="0" ci="13" mb="0" cb="0"/><line nr="235" mi="0" ci="13" mb="0" cb="0"/><line nr="239" mi="0" ci="13" mb="0" cb="0"/><line nr="243" mi="0" ci="13" mb="0" cb="0"/><line nr="247" mi="0" ci="12" mb="0" cb="0"/><line nr="251" mi="0" ci="12" mb="0" cb="0"/><line nr="255" mi="0" ci="13" mb="0" cb="0"/><line nr="259" mi="0" ci="13" mb="0" cb="0"/><line nr="263" mi="13" ci="0" mb="0" cb="0"/><line nr="267" mi="13" ci="0" mb="0" cb="0"/><line nr="277" mi="0" ci="16" mb="0" cb="0"/><line nr="288" mi="21" ci="0" mb="0" cb="0"/><line nr="298" mi="10" ci="0" mb="0" cb="0"/><line nr="308" mi="0" ci="4" mb="0" cb="0"/><line nr="318" mi="0" ci="28" mb="0" cb="0"/><line nr="328" mi="0" ci="4" mb="0" cb="0"/><line nr="338" mi="0" ci="10" mb="0" cb="0"/><line nr="348" mi="0" ci="10" mb="0" cb="0"/><counter type="INSTRUCTION" missed="397" covered="703"/><counter type="BRANCH" missed="18" covered="14"/><counter type="LINE" missed="47" covered="73"/><counter type="COMPLEXITY" missed="32" covered="41"/><counter type="METHOD" missed="20" covered="37"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="414" covered="933"/><counter type="BRANCH" missed="21" covered="33"/><counter type="LINE" missed="50" covered="125"/><counter type="COMPLEXITY" missed="37" covered="72"/><counter type="METHOD" missed="22" covered="60"/><counter type="CLASS" missed="0" covered="7"/></package><package name="com/dan323/functional/annotation/compiler/util"><class name="com/dan323/functional/annotation/compiler/util/AlternativeUtil" sourcefilename="AlternativeUtil.java"><method name="&lt;init&gt;" desc="()V" line="7"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="empty" desc="(Lcom/dan323/functional/annotation/funcs/IAlternative;)Ljava/lang/Object;" line="12"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="disj" desc="(Lcom/dan323/functional/annotation/funcs/IAlternative;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="17"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$disj$1" desc="()Ljava/lang/IllegalArgumentException;" line="18"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$empty$0" desc="()Ljava/lang/IllegalArgumentException;" line="13"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="28" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/dan323/functional/annotation/compiler/util/FunctionalUtil$IdentityApplicative" sourcefilename="FunctionalUtil.java"><method name="&lt;init&gt;" desc="()V" line="219"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pure" desc="(Ljava/lang/Object;)Lcom/dan323/functional/annotation/compiler/util/FunctionalUtil$Identity;" line="222"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fapply" desc="(Lcom/dan323/functional/annotation/compiler/util/FunctionalUtil$Identity;Lcom/dan323/functional/annotation/compiler/util/FunctionalUtil$Identity;)Lcom/dan323/functional/annotation/compiler/util/FunctionalUtil$Identity;" line="226"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Lcom/dan323/functional/annotation/compiler/util/FunctionalUtil$Identity;Ljava/util/function/Function;)Lcom/dan323/functional/annotation/compiler/util/FunctionalUtil$Identity;" line="230"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getClassAtRuntime" desc="()Ljava/lang/Class;" line="235"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/dan323/functional/annotation/compiler/util/FunctionalUtil" sourcefilename="FunctionalUtil.java"><method name="&lt;init&gt;" desc="()V" line="19"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isTraversal" desc="(Ljava/lang/Class;)Z" line="24"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isAlternative" desc="(Ljava/lang/Class;)Z" line="28"><counter type="INSTRUCTION" missed="2" covered="6"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isApplicative" desc="(Ljava/lang/Class;)Z" line="32"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isMonad" desc="(Ljava/lang/Class;)Z" line="36"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isFunctor" desc="(Ljava/lang/Class;)Z" line="40"><counter type="INSTRUCTION" missed="1" covered="14"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSemigroup" desc="(Ljava/lang/Class;)Z" line="44"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isFoldable" desc="(Ljava/lang/Class;)Z" line="48"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isMonoid" desc="(Ljava/lang/Class;)Z" line="52"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="implementsStaticMethod" desc="(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Z" line="57"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getMethod" desc="(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;" line="66"><counter type="INSTRUCTION" missed="6" covered="5"/><counter type="LINE" missed="2" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getMethodIfExists" desc="(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/util/Optional;" line="73"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invokeStaticMethod" desc="(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;" line="82"><counter type="INSTRUCTION" missed="21" covered="43"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="3" covered="5"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="foldableFold" desc="(Lcom/dan323/functional/annotation/funcs/IFoldable;Lcom/dan323/functional/annotation/algs/IMonoid;Ljava/lang/Object;)Ljava/util/Optional;" line="97"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="foldableFoldMap" desc="(Lcom/dan323/functional/annotation/funcs/IFoldable;Lcom/dan323/functional/annotation/algs/IMonoid;Ljava/util/function/Function;Ljava/lang/Object;)Ljava/util/Optional;" line="110"><counter type="INSTRUCTION" missed="2" covered="36"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="foldableFoldr" desc="(Lcom/dan323/functional/annotation/funcs/IFoldable;Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Optional;" line="122"><counter type="INSTRUCTION" missed="2" covered="36"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="functorMapConst" desc="(Lcom/dan323/functional/annotation/funcs/IFunctor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Optional;" line="133"><counter type="INSTRUCTION" missed="2" covered="30"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="applicativeKeepLeft" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Optional;" line="144"><counter type="INSTRUCTION" missed="2" covered="31"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="applicativeKeepRight" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Optional;" line="154"><counter type="INSTRUCTION" missed="2" covered="31"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="travesalTraverse" desc="(Lcom/dan323/functional/annotation/funcs/ITraversal;Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/util/function/Function;Ljava/lang/Object;)Ljava/util/Optional;" line="164"><counter type="INSTRUCTION" missed="2" covered="36"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="traversalMap" desc="(Lcom/dan323/functional/annotation/funcs/IFunctor;Ljava/lang/Object;Ljava/util/function/Function;)Ljava/util/Optional;" line="177"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="traversalSequenceA" desc="(Lcom/dan323/functional/annotation/funcs/ITraversal;Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;)Ljava/util/Optional;" line="190"><counter type="INSTRUCTION" missed="2" covered="30"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="alternativeEmpty" desc="(Lcom/dan323/functional/annotation/funcs/IAlternative;)Ljava/util/Optional;" line="201"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="alternativeDisj" desc="(Lcom/dan323/functional/annotation/funcs/IAlternative;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Optional;" line="210"><counter type="INSTRUCTION" missed="28" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="semigroupOp" desc="(Lcom/dan323/functional/annotation/algs/ISemigroup;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Optional;" line="265"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="monoidUnit" desc="(Lcom/dan323/functional/annotation/algs/IMonoid;)Ljava/util/Optional;" line="290"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="applicativeMap" desc="(Lcom/dan323/functional/annotation/funcs/IFunctor;Ljava/lang/Object;Ljava/util/function/Function;)Ljava/util/Optional;" line="301"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="monadMap" desc="(Lcom/dan323/functional/annotation/funcs/IFunctor;Ljava/lang/Object;Ljava/util/function/Function;)Ljava/util/Optional;" line="312"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="functorMap" desc="(Lcom/dan323/functional/annotation/funcs/IFunctor;Ljava/lang/Object;Ljava/util/function/Function;)Ljava/util/Optional;" line="323"><counter type="INSTRUCTION" missed="2" covered="25"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="applicativePure" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;)Ljava/util/Optional;" line="334"><counter type="INSTRUCTION" missed="2" covered="19"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="applicativeFapply" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Optional;" line="345"><counter type="INSTRUCTION" missed="2" covered="31"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="monadFapply" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Optional;" line="356"><counter type="INSTRUCTION" missed="2" covered="32"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="applicativeLiftA2" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Optional;" line="370"><counter type="INSTRUCTION" missed="2" covered="37"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="monadLiftA2" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Optional;" line="381"><counter type="INSTRUCTION" missed="2" covered="33"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="monadFlatMap" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Ljava/util/function/Function;Ljava/lang/Object;)Ljava/util/Optional;" line="396"><counter type="INSTRUCTION" missed="2" covered="30"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="monadJoin" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Ljava/lang/Object;)Ljava/util/Optional;" line="410"><counter type="INSTRUCTION" missed="2" covered="24"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$monadJoin$74" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Ljava/lang/Object;)Ljava/util/Optional;" line="413"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$monadJoin$73" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="414"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$monadJoin$72" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="412"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$monadFlatMap$71" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Ljava/lang/Object;Ljava/util/function/Function;)Ljava/util/Optional;" line="399"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$monadFlatMap$70" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Ljava/lang/Object;Ljava/util/function/Function;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="401"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$monadFlatMap$69" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Ljava/lang/reflect/Method;)Ljava/util/Optional;" line="400"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$monadFlatMap$68" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="398"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$monadLiftA2$67" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="386"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$monadLiftA2$66" desc="(Ljava/util/function/BiFunction;Ljava/lang/Object;)Ljava/util/function/Function;" line="386"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$monadLiftA2$65" desc="(Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="386"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$monadLiftA2$64" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Lcom/dan323/functional/annotation/funcs/IApplicative;)Ljava/util/Optional;" line="384"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$monadLiftA2$63" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/reflect/Method;)Ljava/util/Optional;" line="385"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$applicativeLiftA2$62" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/util/Optional;" line="373"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applicativeLiftA2$61" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="374"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applicativeLiftA2$60" desc="(Ljava/util/function/BiFunction;Ljava/lang/Object;)Ljava/util/function/Function;" line="374"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applicativeLiftA2$59" desc="(Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="374"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applicativeLiftA2$58" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="372"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$monadFapply$57" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="361"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$monadFapply$56" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="361"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$monadFapply$55" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Lcom/dan323/functional/annotation/funcs/IApplicative;)Ljava/util/Optional;" line="359"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$monadFapply$54" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/reflect/Method;)Ljava/util/Optional;" line="360"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$applicativeFapply$53" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Optional;" line="348"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applicativeFapply$52" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="349"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applicativeFapply$51" desc="(Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;" line="349"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applicativeFapply$50" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="347"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applicativePure$49" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="336"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$functorMap$48" desc="(Lcom/dan323/functional/annotation/funcs/IFunctor;Ljava/lang/Object;Ljava/util/function/Function;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="325"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$monadMap$47" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="316"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$monadMap$46" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;" line="316"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$monadMap$45" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Ljava/lang/reflect/Method;)Ljava/util/Optional;" line="315"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applicativeMap$44" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/util/function/Function;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="305"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applicativeMap$43" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Lcom/dan323/functional/annotation/funcs/IFunctor;)Ljava/util/Optional;" line="304"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$monoidUnit$42" desc="(Lcom/dan323/functional/annotation/algs/IMonoid;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="292"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$semigroupOp$41" desc="(Lcom/dan323/functional/annotation/algs/ISemigroup;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="281"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$semigroupOp$40" desc="(Lcom/dan323/functional/annotation/algs/ISemigroup;)Ljava/util/Optional;" line="280"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$semigroupOp$39" desc="(Lcom/dan323/functional/annotation/algs/ISemigroup;Ljava/lang/Class;)Ljava/util/Optional;" line="279"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$semigroupOp$38" desc="(Ljava/lang/reflect/Type;)Ljava/lang/Class;" line="272"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$semigroupOp$37" desc="(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;" line="270"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$semigroupOp$36" desc="(Ljava/lang/reflect/Type;)Z" line="268"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$semigroupOp$35" desc="(Ljava/lang/reflect/Type;)Z" line="267"><counter type="INSTRUCTION" missed="1" covered="13"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$alternativeDisj$34" desc="(Lcom/dan323/functional/annotation/funcs/IAlternative;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="212"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$alternativeEmpty$33" desc="(Lcom/dan323/functional/annotation/funcs/IAlternative;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="203"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$traversalSequenceA$32" desc="(Lcom/dan323/functional/annotation/funcs/ITraversal;Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;)Ljava/util/Optional;" line="193"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$traversalSequenceA$31" desc="(Lcom/dan323/functional/annotation/funcs/ITraversal;Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="194"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$traversalSequenceA$30" desc="(Lcom/dan323/functional/annotation/funcs/ITraversal;Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="192"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$traversalMap$29" desc="(Lcom/dan323/functional/annotation/funcs/ITraversal;Lcom/dan323/functional/annotation/funcs/IFunctor;Ljava/util/function/Function;Ljava/lang/Object;)Ljava/util/Optional;" line="181"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$traversalMap$28" desc="(Lcom/dan323/functional/annotation/funcs/ITraversal;Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="183"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$traversalMap$27" desc="(Lcom/dan323/functional/annotation/funcs/ITraversal;Lcom/dan323/functional/annotation/funcs/IFunctor;)Ljava/util/Optional;" line="182"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$traversalMap$26" desc="(Lcom/dan323/functional/annotation/funcs/ITraversal;Ljava/lang/Object;Ljava/util/function/Function;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="180"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$travesalTraverse$25" desc="(Lcom/dan323/functional/annotation/funcs/ITraversal;Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/util/function/Function;)Ljava/util/Optional;" line="167"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$travesalTraverse$24" desc="(Lcom/dan323/functional/annotation/funcs/ITraversal;Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/util/function/Function;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="169"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$travesalTraverse$23" desc="(Lcom/dan323/functional/annotation/funcs/ITraversal;Ljava/lang/reflect/Method;)Ljava/util/Optional;" line="168"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$travesalTraverse$22" desc="(Lcom/dan323/functional/annotation/funcs/ITraversal;Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="166"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applicativeKeepRight$21" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Optional;" line="157"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applicativeKeepRight$20" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="156"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$applicativeKeepLeft$19" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Optional;" line="147"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applicativeKeepLeft$18" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="147"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applicativeKeepLeft$17" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="146"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$functorMapConst$16" desc="(Lcom/dan323/functional/annotation/funcs/IFunctor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Optional;" line="136"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$functorMapConst$15" desc="(Lcom/dan323/functional/annotation/funcs/IFunctor;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="137"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$functorMapConst$14" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="137"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$functorMapConst$13" desc="(Lcom/dan323/functional/annotation/funcs/IFunctor;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="135"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$foldableFoldr$12" desc="(Lcom/dan323/functional/annotation/funcs/IFoldable;Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Optional;" line="125"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$foldableFoldr$11" desc="(Lcom/dan323/functional/annotation/funcs/IFoldable;Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="126"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$foldableFoldr$10" desc="(Ljava/util/function/BiFunction;Ljava/lang/Object;)Ljava/util/function/Function;" line="126"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$foldableFoldr$9" desc="(Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="126"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$foldableFoldr$8" desc="(Lcom/dan323/functional/annotation/funcs/IFoldable;Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="124"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$foldableFoldMap$7" desc="(Lcom/dan323/functional/annotation/funcs/IFoldable;Lcom/dan323/functional/annotation/algs/IMonoid;Ljava/util/function/Function;Ljava/lang/Object;)Ljava/util/Optional;" line="113"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$foldableFoldMap$6" desc="(Lcom/dan323/functional/annotation/funcs/IFoldable;Lcom/dan323/functional/annotation/algs/IMonoid;Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="114"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$foldableFoldMap$5" desc="(Lcom/dan323/functional/annotation/algs/IMonoid;Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="114"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$foldableFoldMap$4" desc="(Lcom/dan323/functional/annotation/funcs/IFoldable;Lcom/dan323/functional/annotation/algs/IMonoid;Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="112"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$foldableFold$3" desc="(Lcom/dan323/functional/annotation/funcs/IFoldable;Lcom/dan323/functional/annotation/algs/IMonoid;Ljava/lang/Object;)Ljava/util/Optional;" line="100"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$foldableFold$2" desc="(Lcom/dan323/functional/annotation/funcs/IFoldable;Lcom/dan323/functional/annotation/algs/IMonoid;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="102"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$foldableFold$1" desc="(Lcom/dan323/functional/annotation/funcs/IFoldable;)Ljava/util/Optional;" line="101"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$foldableFold$0" desc="(Lcom/dan323/functional/annotation/funcs/IFoldable;Lcom/dan323/functional/annotation/algs/IMonoid;Ljava/lang/Object;Ljava/lang/reflect/Method;)Ljava/lang/Object;" line="99"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="240" covered="1611"/><counter type="BRANCH" missed="26" covered="62"/><counter type="LINE" missed="30" covered="141"/><counter type="COMPLEXITY" missed="37" covered="118"/><counter type="METHOD" missed="13" covered="98"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/dan323/functional/annotation/compiler/util/MonadUtil" sourcefilename="MonadUtil.java"><method name="&lt;init&gt;" desc="()V" line="14"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="flatMap" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;" line="19"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="join" desc="(Lcom/dan323/functional/annotation/funcs/IMonad;Ljava/lang/Object;)Ljava/lang/Object;" line="24"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$join$1" desc="()Ljava/lang/IllegalArgumentException;" line="25"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$flatMap$0" desc="()Ljava/lang/IllegalArgumentException;" line="20"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="6" covered="23"/><counter type="LINE" missed="2" covered="4"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="1" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/dan323/functional/annotation/compiler/util/SemigroupUtil" sourcefilename="SemigroupUtil.java"><method name="&lt;init&gt;" desc="()V" line="12"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="op" desc="(Lcom/dan323/functional/annotation/algs/ISemigroup;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="17"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$op$0" desc="()Ljava/lang/IllegalArgumentException;" line="18"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="7" covered="12"/><counter type="LINE" missed="2" covered="2"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="1" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/dan323/functional/annotation/compiler/util/FunctionalUtil$EndoMonoid" sourcefilename="FunctionalUtil.java"><method name="&lt;init&gt;" desc="()V" line="252"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="op" desc="(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/function/Function;" line="254"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unit" desc="()Ljava/util/function/Function;" line="258"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/dan323/functional/annotation/compiler/util/ApplicativeUtil" sourcefilename="ApplicativeUtil.java"><method name="&lt;init&gt;" desc="()V" line="14"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pure" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;)Ljava/lang/Object;" line="19"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fapply" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="24"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftA2" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="30"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="keepLeft" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="36"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="keepRight" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="41"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$keepRight$6" desc="()Ljava/lang/IllegalArgumentException;" line="42"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$keepLeft$5" desc="()Ljava/lang/IllegalArgumentException;" line="37"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$liftA2$4" desc="()Ljava/lang/IllegalArgumentException;" line="32"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$liftA2$3" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Optional;" line="31"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$fapply$2" desc="()Ljava/lang/IllegalArgumentException;" line="26"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$fapply$1" desc="(Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Optional;" line="25"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$pure$0" desc="()Ljava/lang/IllegalArgumentException;" line="20"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="16" covered="72"/><counter type="LINE" missed="2" covered="12"/><counter type="COMPLEXITY" missed="3" covered="10"/><counter type="METHOD" missed="3" covered="10"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/dan323/functional/annotation/compiler/util/MonoidUtil" sourcefilename="MonoidUtil.java"><method name="&lt;init&gt;" desc="()V" line="10"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unit" desc="(Lcom/dan323/functional/annotation/algs/IMonoid;)Ljava/lang/Object;" line="13"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unit$0" desc="()Ljava/lang/IllegalArgumentException;" line="14"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="3" covered="10"/><counter type="LINE" missed="1" covered="2"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="1" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/dan323/functional/annotation/compiler/util/FoldableUtil" sourcefilename="FoldableUtil.java"><method name="&lt;init&gt;" desc="()V" line="16"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="fold" desc="(Lcom/dan323/functional/annotation/funcs/IFoldable;Lcom/dan323/functional/annotation/algs/IMonoid;Ljava/lang/Object;)Ljava/lang/Object;" line="21"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="foldMap" desc="(Lcom/dan323/functional/annotation/funcs/IFoldable;Lcom/dan323/functional/annotation/algs/IMonoid;Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;" line="26"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="foldr" desc="(Lcom/dan323/functional/annotation/funcs/IFoldable;Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="31"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$foldr$2" desc="()Ljava/lang/IllegalArgumentException;" line="32"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$foldMap$1" desc="()Ljava/lang/IllegalArgumentException;" line="27"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$fold$0" desc="()Ljava/lang/IllegalArgumentException;" line="22"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="16" covered="28"/><counter type="LINE" missed="2" covered="6"/><counter type="COMPLEXITY" missed="3" covered="4"/><counter type="METHOD" missed="3" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/dan323/functional/annotation/compiler/util/FunctionalUtil$Identity" sourcefilename="FunctionalUtil.java"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;)V" line="242"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="()Ljava/lang/Object;" line="247"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/dan323/functional/annotation/compiler/util/TraversalUtil" sourcefilename="TraversalUtil.java"><method name="&lt;init&gt;" desc="()V" line="10"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="traverse" desc="(Lcom/dan323/functional/annotation/funcs/ITraversal;Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;" line="15"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sequenceA" desc="(Lcom/dan323/functional/annotation/funcs/ITraversal;Lcom/dan323/functional/annotation/funcs/IApplicative;Ljava/lang/Object;)Ljava/lang/Object;" line="20"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$sequenceA$1" desc="()Ljava/lang/IllegalArgumentException;" line="21"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$traverse$0" desc="()Ljava/lang/IllegalArgumentException;" line="16"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="16" covered="15"/><counter type="LINE" missed="2" covered="4"/><counter type="COMPLEXITY" missed="3" covered="2"/><counter type="METHOD" missed="3" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/dan323/functional/annotation/compiler/util/FunctorUtil" sourcefilename="FunctorUtil.java"><method name="&lt;init&gt;" desc="()V" line="14"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Lcom/dan323/functional/annotation/funcs/IFunctor;Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;" line="19"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="mapConst" desc="(Lcom/dan323/functional/annotation/funcs/IFunctor;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="27"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$mapConst$4" desc="()Ljava/lang/IllegalArgumentException;" line="28"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$map$3" desc="()Ljava/lang/IllegalArgumentException;" line="23"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$map$2" desc="(Lcom/dan323/functional/annotation/funcs/IFunctor;Ljava/lang/Object;Ljava/util/function/Function;)Ljava/util/Optional;" line="22"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$map$1" desc="(Lcom/dan323/functional/annotation/funcs/IFunctor;Ljava/lang/Object;Ljava/util/function/Function;)Ljava/util/Optional;" line="21"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$map$0" desc="(Lcom/dan323/functional/annotation/funcs/IFunctor;Ljava/lang/Object;Ljava/util/function/Function;)Ljava/util/Optional;" line="20"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="11" covered="49"/><counter type="LINE" missed="2" covered="7"/><counter type="COMPLEXITY" missed="2" covered="6"/><counter type="METHOD" missed="2" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="FunctionalUtil.java"><line nr="19" mi="2" ci="0" mb="0" cb="0"/><line nr="20" mi="4" ci="0" mb="0" cb="0"/><line nr="24" mi="0" ci="8" mb="0" cb="2"/><line nr="28" mi="2" ci="6" mb="1" cb="1"/><line nr="32" mi="0" ci="14" mb="1" cb="5"/><line nr="36" mi="0" ci="8" mb="0" cb="2"/><line nr="40" mi="1" ci="14" mb="1" cb="5"/><line nr="44" mi="0" ci="11" mb="0" cb="4"/><line nr="48" mi="0" ci="11" mb="1" cb="3"/><line nr="52" mi="0" ci="8" mb="0" cb="2"/><line nr="57" mi="0" ci="5" mb="0" cb="0"/><line nr="58" mi="0" ci="2" mb="0" cb="0"/><line nr="59" mi="0" ci="1" mb="0" cb="0"/><line nr="60" mi="0" ci="2" mb="0" cb="0"/><line nr="66" mi="0" ci="5" mb="0" cb="0"/><line nr="67" mi="1" ci="0" mb="0" cb="0"/><line nr="68" mi="5" ci="0" mb="0" cb="0"/><line nr="73" mi="0" ci="5" mb="0" cb="2"/><line nr="74" mi="0" ci="6" mb="0" cb="0"/><line nr="76" mi="0" ci="2" mb="0" cb="0"/><line nr="82" mi="0" ci="5" mb="0" cb="0"/><line nr="83" mi="1" ci="0" mb="0" cb="0"/><line nr="84" mi="14" ci="0" mb="0" cb="0"/><line nr="85" mi="0" ci="1" mb="0" cb="0"/><line nr="86" mi="0" ci="2" mb="0" cb="0"/><line nr="87" mi="3" ci="15" mb="2" cb="2"/><line nr="88" mi="3" ci="0" mb="0" cb="0"/><line nr="90" mi="0" ci="20" mb="0" cb="0"/><line nr="97" mi="0" ci="4" mb="0" cb="2"/><line nr="98" mi="0" ci="20" mb="0" cb="0"/><line nr="99" mi="0" ci="19" mb="0" cb="0"/><line nr="100" mi="0" ci="23" mb="0" cb="0"/><line nr="101" mi="0" ci="25" mb="0" cb="0"/><line nr="102" mi="0" ci="7" mb="0" cb="0"/><line nr="104" mi="0" ci="2" mb="0" cb="0"/><line nr="110" mi="0" ci="4" mb="1" cb="1"/><line nr="111" mi="0" ci="25" mb="0" cb="0"/><line nr="112" mi="0" ci="24" mb="0" cb="0"/><line nr="113" mi="0" ci="26" mb="0" cb="0"/><line nr="114" mi="0" ci="17" mb="0" cb="0"/><line nr="116" mi="2" ci="0" mb="0" cb="0"/><line nr="122" mi="0" ci="4" mb="1" cb="1"/><line nr="123" mi="0" ci="25" mb="0" cb="0"/><line nr="124" mi="0" ci="24" mb="0" cb="0"/><line nr="125" mi="0" ci="26" mb="0" cb="0"/><line nr="126" mi="0" ci="22" mb="0" cb="0"/><line nr="128" mi="2" ci="0" mb="0" cb="0"/><line nr="133" mi="0" ci="4" mb="1" cb="1"/><line nr="134" mi="0" ci="20" mb="0" cb="0"/><line nr="135" mi="0" ci="19" mb="0" cb="0"/><line nr="136" mi="0" ci="21" mb="0" cb="0"/><line nr="137" mi="0" ci="9" mb="0" cb="0"/><line nr="139" mi="2" ci="0" mb="0" cb="0"/><line nr="144" mi="0" ci="4" mb="1" cb="1"/><line nr="145" mi="0" ci="21" mb="0" cb="0"/><line nr="146" mi="14" ci="5" mb="0" cb="0"/><line nr="147" mi="0" ci="10" mb="0" cb="0"/><line nr="149" mi="2" ci="0" mb="0" cb="0"/><line nr="154" mi="0" ci="4" mb="1" cb="1"/><line nr="155" mi="0" ci="21" mb="0" cb="0"/><line nr="156" mi="14" ci="5" mb="0" cb="0"/><line nr="157" mi="0" ci="10" mb="0" cb="0"/><line nr="159" mi="2" ci="0" mb="0" cb="0"/><line nr="164" mi="0" ci="4" mb="1" cb="1"/><line nr="165" mi="0" ci="25" mb="0" cb="0"/><line nr="166" mi="0" ci="24" mb="0" cb="0"/><line nr="167" mi="0" ci="19" mb="0" cb="0"/><line nr="168" mi="0" ci="22" mb="0" cb="0"/><line nr="169" mi="0" ci="9" mb="0" cb="0"/><line nr="172" mi="2" ci="0" mb="0" cb="0"/><line nr="177" mi="0" ci="4" mb="0" cb="2"/><line nr="178" mi="0" ci="3" mb="0" cb="0"/><line nr="179" mi="0" ci="20" mb="0" cb="0"/><line nr="180" mi="14" ci="6" mb="0" cb="0"/><line nr="181" mi="0" ci="24" mb="0" cb="0"/><line nr="182" mi="12" ci="5" mb="0" cb="0"/><line nr="183" mi="0" ci="13" mb="0" cb="0"/><line nr="185" mi="0" ci="2" mb="0" cb="0"/><line nr="190" mi="0" ci="4" mb="1" cb="1"/><line nr="191" mi="0" ci="20" mb="0" cb="0"/><line nr="192" mi="0" ci="19" mb="0" cb="0"/><line nr="193" mi="0" ci="25" mb="0" cb="0"/><line nr="194" mi="0" ci="7" mb="0" cb="0"/><line nr="196" mi="2" ci="0" mb="0" cb="0"/><line nr="201" mi="4" ci="0" mb="2" cb="0"/><line nr="202" mi="9" ci="0" mb="0" cb="0"/><line nr="203" mi="7" ci="0" mb="0" cb="0"/><line nr="205" mi="2" ci="0" mb="0" cb="0"/><line nr="210" mi="4" ci="0" mb="2" cb="0"/><line nr="211" mi="21" ci="0" mb="0" cb="0"/><line nr="212" mi="15" ci="0" mb="0" cb="0"/><line nr="214" mi="2" ci="0" mb="0" cb="0"/><line nr="219" mi="0" ci="3" mb="0" cb="0"/><line nr="222" mi="0" ci="5" mb="0" cb="0"/><line nr="226" mi="0" ci="10" mb="0" cb="0"/><line nr="230" mi="0" ci="8" mb="0" cb="0"/><line nr="235" mi="0" ci="2" mb="0" cb="0"/><line nr="242" mi="0" ci="2" mb="0" cb="0"/><line nr="243" mi="0" ci="3" mb="0" cb="0"/><line nr="244" mi="0" ci="1" mb="0" cb="0"/><line nr="247" mi="0" ci="3" mb="0" cb="0"/><line nr="252" mi="0" ci="3" mb="0" cb="0"/><line nr="254" mi="0" ci="4" mb="0" cb="0"/><line nr="258" mi="0" ci="2" mb="0" cb="0"/><line nr="265" mi="0" ci="4" mb="0" cb="2"/><line nr="266" mi="0" ci="6" mb="0" cb="0"/><line nr="267" mi="1" ci="15" mb="1" cb="3"/><line nr="268" mi="0" ci="4" mb="0" cb="0"/><line nr="269" mi="0" ci="2" mb="0" cb="0"/><line nr="270" mi="0" ci="8" mb="0" cb="0"/><line nr="271" mi="0" ci="3" mb="0" cb="0"/><line nr="272" mi="0" ci="6" mb="0" cb="2"/><line nr="273" mi="0" ci="2" mb="0" cb="0"/><line nr="274" mi="0" ci="6" mb="0" cb="2"/><line nr="275" mi="0" ci="4" mb="0" cb="0"/><line nr="277" mi="0" ci="2" mb="0" cb="0"/><line nr="279" mi="0" ci="18" mb="0" cb="0"/><line nr="280" mi="0" ci="20" mb="0" cb="0"/><line nr="281" mi="0" ci="15" mb="0" cb="0"/><line nr="283" mi="0" ci="2" mb="0" cb="0"/><line nr="290" mi="0" ci="4" mb="0" cb="2"/><line nr="291" mi="0" ci="9" mb="0" cb="0"/><line nr="292" mi="0" ci="7" mb="0" cb="0"/><line nr="294" mi="0" ci="2" mb="0" cb="0"/><line nr="301" mi="0" ci="4" mb="0" cb="2"/><line nr="302" mi="0" ci="3" mb="0" cb="0"/><line nr="303" mi="0" ci="20" mb="0" cb="0"/><line nr="304" mi="0" ci="26" mb="0" cb="0"/><line nr="305" mi="0" ci="8" mb="0" cb="0"/><line nr="307" mi="0" ci="2" mb="0" cb="0"/><line nr="312" mi="0" ci="4" mb="0" cb="2"/><line nr="313" mi="0" ci="3" mb="0" cb="0"/><line nr="314" mi="0" ci="18" mb="0" cb="0"/><line nr="315" mi="0" ci="16" mb="0" cb="0"/><line nr="316" mi="0" ci="14" mb="0" cb="0"/><line nr="318" mi="0" ci="2" mb="0" cb="0"/><line nr="323" mi="0" ci="4" mb="1" cb="1"/><line nr="324" mi="0" ci="20" mb="0" cb="0"/><line nr="325" mi="0" ci="15" mb="0" cb="0"/><line nr="327" mi="2" ci="0" mb="0" cb="0"/><line nr="334" mi="0" ci="4" mb="1" cb="1"/><line nr="335" mi="0" ci="14" mb="0" cb="0"/><line nr="336" mi="0" ci="11" mb="0" cb="0"/><line nr="338" mi="2" ci="0" mb="0" cb="0"/><line nr="345" mi="0" ci="4" mb="1" cb="1"/><line nr="346" mi="0" ci="21" mb="0" cb="0"/><line nr="347" mi="0" ci="19" mb="0" cb="0"/><line nr="348" mi="0" ci="26" mb="0" cb="0"/><line nr="349" mi="0" ci="11" mb="0" cb="0"/><line nr="351" mi="2" ci="0" mb="0" cb="0"/><line nr="356" mi="0" ci="4" mb="1" cb="1"/><line nr="357" mi="0" ci="3" mb="0" cb="0"/><line nr="358" mi="0" ci="19" mb="0" cb="0"/><line nr="359" mi="0" ci="20" mb="0" cb="0"/><line nr="360" mi="16" ci="1" mb="0" cb="0"/><line nr="361" mi="0" ci="14" mb="0" cb="0"/><line nr="363" mi="2" ci="0" mb="0" cb="0"/><line nr="370" mi="0" ci="4" mb="1" cb="1"/><line nr="371" mi="0" ci="26" mb="0" cb="0"/><line nr="372" mi="0" ci="24" mb="0" cb="0"/><line nr="373" mi="0" ci="23" mb="0" cb="0"/><line nr="374" mi="0" ci="19" mb="0" cb="0"/><line nr="376" mi="2" ci="0" mb="0" cb="0"/><line nr="381" mi="0" ci="4" mb="1" cb="1"/><line nr="382" mi="0" ci="3" mb="0" cb="0"/><line nr="383" mi="0" ci="19" mb="0" cb="0"/><line nr="384" mi="0" ci="21" mb="0" cb="0"/><line nr="385" mi="16" ci="1" mb="0" cb="0"/><line nr="386" mi="0" ci="19" mb="0" cb="0"/><line nr="388" mi="2" ci="0" mb="0" cb="0"/><line nr="396" mi="0" ci="4" mb="1" cb="1"/><line nr="397" mi="0" ci="20" mb="0" cb="0"/><line nr="398" mi="0" ci="19" mb="0" cb="0"/><line nr="399" mi="0" ci="15" mb="0" cb="0"/><line nr="400" mi="16" ci="5" mb="0" cb="0"/><line nr="401" mi="7" ci="1" mb="0" cb="0"/><line nr="403" mi="2" ci="0" mb="0" cb="0"/><line nr="410" mi="0" ci="4" mb="1" cb="1"/><line nr="411" mi="0" ci="15" mb="0" cb="0"/><line nr="412" mi="0" ci="14" mb="0" cb="0"/><line nr="413" mi="0" ci="20" mb="0" cb="0"/><line nr="414" mi="0" ci="6" mb="0" cb="0"/><line nr="416" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="240" covered="1657"/><counter type="BRANCH" missed="26" covered="62"/><counter type="LINE" missed="30" covered="153"/><counter type="COMPLEXITY" missed="37" covered="128"/><counter type="METHOD" missed="13" covered="108"/><counter type="CLASS" missed="0" covered="4"/></sourcefile><sourcefile name="MonadUtil.java"><line nr="14" mi="2" ci="0" mb="0" cb="0"/><line nr="15" mi="4" ci="0" mb="0" cb="0"/><line nr="19" mi="0" ci="6" mb="0" cb="0"/><line nr="20" mi="0" ci="6" mb="0" cb="0"/><line nr="24" mi="0" ci="5" mb="0" cb="0"/><line nr="25" mi="0" ci="6" mb="0" cb="0"/><counter type="INSTRUCTION" missed="6" covered="23"/><counter type="LINE" missed="2" covered="4"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="1" covered="4"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="FoldableUtil.java"><line nr="16" mi="2" ci="0" mb="0" cb="0"/><line nr="17" mi="4" ci="0" mb="0" cb="0"/><line nr="21" mi="0" ci="6" mb="0" cb="0"/><line nr="22" mi="0" ci="6" mb="0" cb="0"/><line nr="26" mi="0" ci="7" mb="0" cb="0"/><line nr="27" mi="5" ci="1" mb="0" cb="0"/><line nr="31" mi="0" ci="7" mb="0" cb="0"/><line nr="32" mi="5" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="16" covered="28"/><counter type="LINE" missed="2" covered="6"/><counter type="COMPLEXITY" missed="3" covered="4"/><counter type="METHOD" missed="3" covered="4"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="SemigroupUtil.java"><line nr="12" mi="2" ci="0" mb="0" cb="0"/><line nr="13" mi="5" ci="0" mb="0" cb="0"/><line nr="17" mi="0" ci="6" mb="0" cb="0"/><line nr="18" mi="0" ci="6" mb="0" cb="0"/><counter type="INSTRUCTION" missed="7" covered="12"/><counter type="LINE" missed="2" covered="2"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="1" covered="2"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="MonoidUtil.java"><line nr="10" mi="3" ci="0" mb="0" cb="0"/><line nr="13" mi="0" ci="4" mb="0" cb="0"/><line nr="14" mi="0" ci="6" mb="0" cb="0"/><counter type="INSTRUCTION" missed="3" covered="10"/><counter type="LINE" missed="1" covered="2"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="1" covered="2"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="FunctorUtil.java"><line nr="14" mi="2" ci="0" mb="0" cb="0"/><line nr="15" mi="4" ci="0" mb="0" cb="0"/><line nr="19" mi="0" ci="9" mb="0" cb="0"/><line nr="20" mi="0" ci="10" mb="0" cb="0"/><line nr="21" mi="0" ci="10" mb="0" cb="0"/><line nr="22" mi="0" ci="7" mb="0" cb="0"/><line nr="23" mi="0" ci="6" mb="0" cb="0"/><line nr="27" mi="0" ci="6" mb="0" cb="0"/><line nr="28" mi="5" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="11" covered="49"/><counter type="LINE" missed="2" covered="7"/><counter type="COMPLEXITY" missed="2" covered="6"/><counter type="METHOD" missed="2" covered="6"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="ApplicativeUtil.java"><line nr="14" mi="2" ci="0" mb="0" cb="0"/><line nr="15" mi="4" ci="0" mb="0" cb="0"/><line nr="19" mi="0" ci="5" mb="0" cb="0"/><line nr="20" mi="0" ci="6" mb="0" cb="0"/><line nr="24" mi="0" ci="9" mb="0" cb="0"/><line nr="25" mi="0" ci="7" mb="0" cb="0"/><line nr="26" mi="0" ci="6" mb="0" cb="0"/><line nr="30" mi="0" ci="11" mb="0" cb="0"/><line nr="31" mi="0" ci="8" mb="0" cb="0"/><line nr="32" mi="0" ci="6" mb="0" cb="0"/><line nr="36" mi="0" ci="6" mb="0" cb="0"/><line nr="37" mi="5" ci="1" mb="0" cb="0"/><line nr="41" mi="0" ci="6" mb="0" cb="0"/><line nr="42" mi="5" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="16" covered="72"/><counter type="LINE" missed="2" covered="12"/><counter type="COMPLEXITY" missed="3" covered="10"/><counter type="METHOD" missed="3" covered="10"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="AlternativeUtil.java"><line nr="7" mi="2" ci="0" mb="0" cb="0"/><line nr="8" mi="4" ci="0" mb="0" cb="0"/><line nr="12" mi="4" ci="0" mb="0" cb="0"/><line nr="13" mi="6" ci="0" mb="0" cb="0"/><line nr="17" mi="6" ci="0" mb="0" cb="0"/><line nr="18" mi="6" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="28" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="TraversalUtil.java"><line nr="10" mi="2" ci="0" mb="0" cb="0"/><line nr="11" mi="4" ci="0" mb="0" cb="0"/><line nr="15" mi="0" ci="7" mb="0" cb="0"/><line nr="16" mi="5" ci="1" mb="0" cb="0"/><line nr="20" mi="0" ci="6" mb="0" cb="0"/><line nr="21" mi="5" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="16" covered="15"/><counter type="LINE" missed="2" covered="4"/><counter type="COMPLEXITY" missed="3" covered="2"/><counter type="METHOD" missed="3" covered="2"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="343" covered="1866"/><counter type="BRANCH" missed="26" covered="62"/><counter type="LINE" missed="49" covered="190"/><counter type="COMPLEXITY" missed="56" covered="158"/><counter type="METHOD" missed="32" covered="138"/><counter type="CLASS" missed="1" covered="11"/></package><counter type="INSTRUCTION" missed="820" covered="3377"/><counter type="BRANCH" missed="55" covered="133"/><counter type="LINE" missed="111" covered="424"/><counter type="COMPLEXITY" missed="103" covered="280"/><counter type="METHOD" missed="57" covered="232"/><counter type="CLASS" missed="1" covered="23"/></group><counter type="INSTRUCTION" missed="3068" covered="3377"/><counter type="BRANCH" missed="165" covered="133"/><counter type="LINE" missed="504" covered="424"/><counter type="COMPLEXITY" missed="484" covered="280"/><counter type="METHOD" missed="383" covered="232"/><counter type="CLASS" missed="56" covered="23"/></report>